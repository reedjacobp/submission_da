
Midterm1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ae  00800100  000006b0  00000744  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  008001ae  008001ae  000007f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000824  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000864  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000df4  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a0a  00000000  00000000  000016a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000482  00000000  00000000  000020aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  0000252c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000500  00000000  00000000  000025fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004a8  00000000  00000000  00002afc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00002fa4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__vector_16>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e0 eb       	ldi	r30, 0xB0	; 176
  c8:	f6 e0       	ldi	r31, 0x06	; 6
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	ae 3a       	cpi	r26, 0xAE	; 174
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	ae ea       	ldi	r26, 0xAE	; 174
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	af 3a       	cpi	r26, 0xAF	; 175
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 a6 00 	call	0x14c	; 0x14c <main>
  ea:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <USART_init>:
	}
}

void USART_init(void)
{
	UCSR0A = (1 << U2X0);
  f2:	82 e0       	ldi	r24, 0x02	; 2
  f4:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UBRR0H = (uint8_t)(BAUD_PRESCALLER >> 8);
  f8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
  fc:	80 e1       	ldi	r24, 0x10	; 16
  fe:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 102:	88 e1       	ldi	r24, 0x18	; 24
 104:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (3 << UCSZ00);
 108:	86 e0       	ldi	r24, 0x06	; 6
 10a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 10e:	08 95       	ret

00000110 <USART_send>:
		StringPtr++;
	}
}

void USART_send(unsigned char data) {			// Function to transmit ASCII value into UDR0
	while (!(UCSR0A & (1 << UDRE0)));			// Keep Checking until  UDRE0 data register 'High' to break loop
 110:	e0 ec       	ldi	r30, 0xC0	; 192
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	90 81       	ld	r25, Z
 116:	95 ff       	sbrs	r25, 5
 118:	fd cf       	rjmp	.-6      	; 0x114 <USART_send+0x4>
	UDR0 = data;								// Store unsigned char serial data into UDR0
 11a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 11e:	08 95       	ret

00000120 <USART_putstring>:
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	UCSR0C = (3 << UCSZ00);
}

void USART_putstring(char* StringPtr)
{
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	ec 01       	movw	r28, r24
	while(*StringPtr != 0x00)
 126:	88 81       	ld	r24, Y
 128:	88 23       	and	r24, r24
 12a:	31 f0       	breq	.+12     	; 0x138 <USART_putstring+0x18>
 12c:	21 96       	adiw	r28, 0x01	; 1
	{
		USART_send(*StringPtr);
 12e:	0e 94 88 00 	call	0x110	; 0x110 <USART_send>
	UCSR0C = (3 << UCSZ00);
}

void USART_putstring(char* StringPtr)
{
	while(*StringPtr != 0x00)
 132:	89 91       	ld	r24, Y+
 134:	81 11       	cpse	r24, r1
 136:	fb cf       	rjmp	.-10     	; 0x12e <USART_putstring+0xe>
	{
		USART_send(*StringPtr);
		StringPtr++;
	}
}
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	08 95       	ret

0000013e <ADC_init>:
	UDR0 = data;								// Store unsigned char serial data into UDR0
}

void ADC_init(void)
{
	ADMUX = (0<<REFS1)|					// reference selection bits
 13e:	84 e4       	ldi	r24, 0x44	; 68
 140:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	(1<<REFS0)|							// AVcc - external cap at AREF
	(0<<ADLAR)|							// ADC Left Adjust Result
	(1<<MUX2)|							// Analog Channel Selection Bits
	(0<<MUX1)|							// ADC4 (PC4)
	(0<<MUX0);
	ADCSRA = (1<<ADEN)|					// ADC Enable
 144:	85 e8       	ldi	r24, 0x85	; 133
 146:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 14a:	08 95       	ret

0000014c <main>:
uint8_t OVF_COUNT = 0; //initialize the overflow count for interrupt
uint8_t OVF_LIMIT = 250; //set the limit the count can reach to set 1 sec delay

int main(void)
{
	USART_init(); //initialize USART
 14c:	0e 94 79 00 	call	0xf2	; 0xf2 <USART_init>
	ADC_init();
 150:	0e 94 9f 00 	call	0x13e	; 0x13e <ADC_init>
	USART_putstring("AT+CWMODE=1\r\n");
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	91 e0       	ldi	r25, 0x01	; 1
 158:	0e 94 90 00 	call	0x120	; 0x120 <USART_putstring>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15c:	8f e3       	ldi	r24, 0x3F	; 63
 15e:	9c e9       	ldi	r25, 0x9C	; 156
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <main+0x14>
 164:	00 c0       	rjmp	.+0      	; 0x166 <main+0x1a>
 166:	00 00       	nop
	_delay_ms(10);
	USART_putstring("AT+CWJAP=\"SBG6700AC-8AD50\",\"98aa7a769e\"\r\n");
 168:	8f e0       	ldi	r24, 0x0F	; 15
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	0e 94 90 00 	call	0x120	; 0x120 <USART_putstring>
 170:	8f e3       	ldi	r24, 0x3F	; 63
 172:	9c e9       	ldi	r25, 0x9C	; 156
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <main+0x28>
 178:	00 c0       	rjmp	.+0      	; 0x17a <main+0x2e>
 17a:	00 00       	nop
	_delay_ms(10);
	USART_putstring("AT+CIPMUX=0\r\n");
 17c:	89 e3       	ldi	r24, 0x39	; 57
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	0e 94 90 00 	call	0x120	; 0x120 <USART_putstring>
 184:	8f e3       	ldi	r24, 0x3F	; 63
 186:	9c e9       	ldi	r25, 0x9C	; 156
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <main+0x3c>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <main+0x42>
 18e:	00 00       	nop
	_delay_ms(10);
	
	TCCR0A = 0x00; //normal operation
 190:	14 bc       	out	0x24, r1	; 36
	TCCR0B |= (1 << CS02); //set prescalar to 256
 192:	85 b5       	in	r24, 0x25	; 37
 194:	84 60       	ori	r24, 0x04	; 4
 196:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 16; //TOP = 256-250 = 16
 198:	80 e1       	ldi	r24, 0x10	; 16
 19a:	86 bd       	out	0x26, r24	; 38
	TIMSK0 |= (1 << TOIE0);
 19c:	ee e6       	ldi	r30, 0x6E	; 110
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	81 60       	ori	r24, 0x01	; 1
 1a4:	80 83       	st	Z, r24
	sei(); //enable interrupt
 1a6:	78 94       	sei
 1a8:	ff cf       	rjmp	.-2      	; 0x1a8 <main+0x5c>

000001aa <__vector_16>:
	(1<<ADPS0);
	
}

ISR (TIMER0_OVF_vect)
{
 1aa:	1f 92       	push	r1
 1ac:	0f 92       	push	r0
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	0f 92       	push	r0
 1b2:	11 24       	eor	r1, r1
 1b4:	2f 93       	push	r18
 1b6:	3f 93       	push	r19
 1b8:	4f 93       	push	r20
 1ba:	5f 93       	push	r21
 1bc:	6f 93       	push	r22
 1be:	7f 93       	push	r23
 1c0:	8f 93       	push	r24
 1c2:	9f 93       	push	r25
 1c4:	af 93       	push	r26
 1c6:	bf 93       	push	r27
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	ef 93       	push	r30
 1ce:	ff 93       	push	r31
	OVF_COUNT++; //increment the overflow counter
 1d0:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <__data_end>
 1d4:	8f 5f       	subi	r24, 0xFF	; 255
 1d6:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <__data_end>
	if (OVF_COUNT == OVF_LIMIT) //check to see if the limit was reached
 1da:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <OVF_LIMIT>
 1de:	89 13       	cpse	r24, r25
 1e0:	85 c0       	rjmp	.+266    	; 0x2ec <__vector_16+0x142>
	{
		ADCSRA|=(1<<ADSC);	//start conversion
 1e2:	ea e7       	ldi	r30, 0x7A	; 122
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	80 64       	ori	r24, 0x40	; 64
 1ea:	80 83       	st	Z, r24
		while((ADCSRA&(1<<ADIF))==0);//wait for conversion to finish
 1ec:	80 81       	ld	r24, Z
 1ee:	84 ff       	sbrs	r24, 4
 1f0:	fd cf       	rjmp	.-6      	; 0x1ec <__vector_16+0x42>
		
		ADCSRA |= (1<<ADIF);
 1f2:	ea e7       	ldi	r30, 0x7A	; 122
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	80 61       	ori	r24, 0x10	; 16
 1fa:	80 83       	st	Z, r24

		int a = ADCL; //a is temperature
 1fc:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
		a = a | (ADCH << 8);
 200:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
		a = (a/1024.0) * 5000/10;
 204:	70 e0       	ldi	r23, 0x00	; 0
 206:	78 2b       	or	r23, r24
 208:	07 2e       	mov	r0, r23
 20a:	00 0c       	add	r0, r0
 20c:	88 0b       	sbc	r24, r24
 20e:	99 0b       	sbc	r25, r25
 210:	0e 94 35 02 	call	0x46a	; 0x46a <__floatsisf>
 214:	20 e0       	ldi	r18, 0x00	; 0
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	40 e8       	ldi	r20, 0x80	; 128
 21a:	5a e3       	ldi	r21, 0x3A	; 58
 21c:	0e 94 c1 02 	call	0x582	; 0x582 <__mulsf3>
 220:	20 e0       	ldi	r18, 0x00	; 0
 222:	30 e4       	ldi	r19, 0x40	; 64
 224:	4c e9       	ldi	r20, 0x9C	; 156
 226:	55 e4       	ldi	r21, 0x45	; 69
 228:	0e 94 c1 02 	call	0x582	; 0x582 <__mulsf3>
 22c:	20 e0       	ldi	r18, 0x00	; 0
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	40 e2       	ldi	r20, 0x20	; 32
 232:	51 e4       	ldi	r21, 0x41	; 65
 234:	0e 94 8b 01 	call	0x316	; 0x316 <__divsf3>
		a = (a*2)+32; //equation to convert celsius to fahrenheit. can't use used 2 instead of 9/5
 238:	0e 94 fd 01 	call	0x3fa	; 0x3fa <__fixsfsi>
 23c:	60 5f       	subi	r22, 0xF0	; 240
 23e:	7f 4f       	sbci	r23, 0xFF	; 255
 240:	cb 01       	movw	r24, r22
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
		a = a % 100;
 246:	64 e6       	ldi	r22, 0x64	; 100
 248:	70 e0       	ldi	r23, 0x00	; 0
 24a:	0e 94 2e 03 	call	0x65c	; 0x65c <__divmodhi4>
 24e:	ec 01       	movw	r28, r24
		
		USART_putstring("AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n");	// Connect API KEy
 250:	87 e4       	ldi	r24, 0x47	; 71
 252:	91 e0       	ldi	r25, 0x01	; 1
 254:	0e 94 90 00 	call	0x120	; 0x120 <USART_putstring>
 258:	8f e3       	ldi	r24, 0x3F	; 63
 25a:	9c e9       	ldi	r25, 0x9C	; 156
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <__vector_16+0xb2>
 260:	00 c0       	rjmp	.+0      	; 0x262 <__vector_16+0xb8>
 262:	00 00       	nop
		_delay_ms(10);
		USART_putstring("AT+CIPSEND=51\r\n");									// Send Serial Data
 264:	83 e7       	ldi	r24, 0x73	; 115
 266:	91 e0       	ldi	r25, 0x01	; 1
 268:	0e 94 90 00 	call	0x120	; 0x120 <USART_putstring>
 26c:	8f e3       	ldi	r24, 0x3F	; 63
 26e:	9c e9       	ldi	r25, 0x9C	; 156
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <__vector_16+0xc6>
 274:	00 c0       	rjmp	.+0      	; 0x276 <__vector_16+0xcc>
 276:	00 00       	nop
		_delay_ms(10);
		USART_putstring("GET /update?key=YLVIWUJ8MIHKPKCR&field1=");// Send Value
 278:	83 e8       	ldi	r24, 0x83	; 131
 27a:	91 e0       	ldi	r25, 0x01	; 1
 27c:	0e 94 90 00 	call	0x120	; 0x120 <USART_putstring>
 280:	8f e3       	ldi	r24, 0x3F	; 63
 282:	9c e9       	ldi	r25, 0x9C	; 156
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <__vector_16+0xda>
 288:	00 c0       	rjmp	.+0      	; 0x28a <__vector_16+0xe0>
 28a:	00 00       	nop
		_delay_ms(10);
		USART_send((a/10)+'0');
 28c:	ce 01       	movw	r24, r28
 28e:	6a e0       	ldi	r22, 0x0A	; 10
 290:	70 e0       	ldi	r23, 0x00	; 0
 292:	0e 94 2e 03 	call	0x65c	; 0x65c <__divmodhi4>
 296:	c8 2f       	mov	r28, r24
 298:	80 e3       	ldi	r24, 0x30	; 48
 29a:	86 0f       	add	r24, r22
 29c:	0e 94 88 00 	call	0x110	; 0x110 <USART_send>
 2a0:	8f e3       	ldi	r24, 0x3F	; 63
 2a2:	9c e9       	ldi	r25, 0x9C	; 156
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <__vector_16+0xfa>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <__vector_16+0x100>
 2aa:	00 00       	nop
		_delay_ms(10);
		a = a % 10;
		USART_send((a)+'0');
 2ac:	80 e3       	ldi	r24, 0x30	; 48
 2ae:	8c 0f       	add	r24, r28
 2b0:	0e 94 88 00 	call	0x110	; 0x110 <USART_send>
 2b4:	8f e3       	ldi	r24, 0x3F	; 63
 2b6:	9c e9       	ldi	r25, 0x9C	; 156
 2b8:	01 97       	sbiw	r24, 0x01	; 1
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <__vector_16+0x10e>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <__vector_16+0x114>
 2be:	00 00       	nop
		_delay_ms(10);
		USART_putstring(" ");
 2c0:	8c ea       	ldi	r24, 0xAC	; 172
 2c2:	91 e0       	ldi	r25, 0x01	; 1
 2c4:	0e 94 90 00 	call	0x120	; 0x120 <USART_putstring>
 2c8:	8f e3       	ldi	r24, 0x3F	; 63
 2ca:	9c e9       	ldi	r25, 0x9C	; 156
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <__vector_16+0x122>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <__vector_16+0x128>
 2d2:	00 00       	nop
		_delay_ms(10);
		USART_putstring("\r\n");
 2d4:	86 e3       	ldi	r24, 0x36	; 54
 2d6:	91 e0       	ldi	r25, 0x01	; 1
 2d8:	0e 94 90 00 	call	0x120	; 0x120 <USART_putstring>
 2dc:	8f e3       	ldi	r24, 0x3F	; 63
 2de:	9c e9       	ldi	r25, 0x9C	; 156
 2e0:	01 97       	sbiw	r24, 0x01	; 1
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <__vector_16+0x136>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <__vector_16+0x13c>
 2e6:	00 00       	nop
		_delay_ms(10);
		OVF_COUNT = 0; //reset overflow counter
 2e8:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <__data_end>
	}
	TCNT0 = 16; //reset TOP
 2ec:	80 e1       	ldi	r24, 0x10	; 16
 2ee:	86 bd       	out	0x26, r24	; 38
}
 2f0:	ff 91       	pop	r31
 2f2:	ef 91       	pop	r30
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	bf 91       	pop	r27
 2fa:	af 91       	pop	r26
 2fc:	9f 91       	pop	r25
 2fe:	8f 91       	pop	r24
 300:	7f 91       	pop	r23
 302:	6f 91       	pop	r22
 304:	5f 91       	pop	r21
 306:	4f 91       	pop	r20
 308:	3f 91       	pop	r19
 30a:	2f 91       	pop	r18
 30c:	0f 90       	pop	r0
 30e:	0f be       	out	0x3f, r0	; 63
 310:	0f 90       	pop	r0
 312:	1f 90       	pop	r1
 314:	18 95       	reti

00000316 <__divsf3>:
 316:	0e 94 9f 01 	call	0x33e	; 0x33e <__divsf3x>
 31a:	0c 94 87 02 	jmp	0x50e	; 0x50e <__fp_round>
 31e:	0e 94 80 02 	call	0x500	; 0x500 <__fp_pscB>
 322:	58 f0       	brcs	.+22     	; 0x33a <__divsf3+0x24>
 324:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__fp_pscA>
 328:	40 f0       	brcs	.+16     	; 0x33a <__divsf3+0x24>
 32a:	29 f4       	brne	.+10     	; 0x336 <__divsf3+0x20>
 32c:	5f 3f       	cpi	r21, 0xFF	; 255
 32e:	29 f0       	breq	.+10     	; 0x33a <__divsf3+0x24>
 330:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__fp_inf>
 334:	51 11       	cpse	r21, r1
 336:	0c 94 bb 02 	jmp	0x576	; 0x576 <__fp_szero>
 33a:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__fp_nan>

0000033e <__divsf3x>:
 33e:	0e 94 98 02 	call	0x530	; 0x530 <__fp_split3>
 342:	68 f3       	brcs	.-38     	; 0x31e <__divsf3+0x8>

00000344 <__divsf3_pse>:
 344:	99 23       	and	r25, r25
 346:	b1 f3       	breq	.-20     	; 0x334 <__divsf3+0x1e>
 348:	55 23       	and	r21, r21
 34a:	91 f3       	breq	.-28     	; 0x330 <__divsf3+0x1a>
 34c:	95 1b       	sub	r25, r21
 34e:	55 0b       	sbc	r21, r21
 350:	bb 27       	eor	r27, r27
 352:	aa 27       	eor	r26, r26
 354:	62 17       	cp	r22, r18
 356:	73 07       	cpc	r23, r19
 358:	84 07       	cpc	r24, r20
 35a:	38 f0       	brcs	.+14     	; 0x36a <__divsf3_pse+0x26>
 35c:	9f 5f       	subi	r25, 0xFF	; 255
 35e:	5f 4f       	sbci	r21, 0xFF	; 255
 360:	22 0f       	add	r18, r18
 362:	33 1f       	adc	r19, r19
 364:	44 1f       	adc	r20, r20
 366:	aa 1f       	adc	r26, r26
 368:	a9 f3       	breq	.-22     	; 0x354 <__divsf3_pse+0x10>
 36a:	35 d0       	rcall	.+106    	; 0x3d6 <__divsf3_pse+0x92>
 36c:	0e 2e       	mov	r0, r30
 36e:	3a f0       	brmi	.+14     	; 0x37e <__divsf3_pse+0x3a>
 370:	e0 e8       	ldi	r30, 0x80	; 128
 372:	32 d0       	rcall	.+100    	; 0x3d8 <__divsf3_pse+0x94>
 374:	91 50       	subi	r25, 0x01	; 1
 376:	50 40       	sbci	r21, 0x00	; 0
 378:	e6 95       	lsr	r30
 37a:	00 1c       	adc	r0, r0
 37c:	ca f7       	brpl	.-14     	; 0x370 <__divsf3_pse+0x2c>
 37e:	2b d0       	rcall	.+86     	; 0x3d6 <__divsf3_pse+0x92>
 380:	fe 2f       	mov	r31, r30
 382:	29 d0       	rcall	.+82     	; 0x3d6 <__divsf3_pse+0x92>
 384:	66 0f       	add	r22, r22
 386:	77 1f       	adc	r23, r23
 388:	88 1f       	adc	r24, r24
 38a:	bb 1f       	adc	r27, r27
 38c:	26 17       	cp	r18, r22
 38e:	37 07       	cpc	r19, r23
 390:	48 07       	cpc	r20, r24
 392:	ab 07       	cpc	r26, r27
 394:	b0 e8       	ldi	r27, 0x80	; 128
 396:	09 f0       	breq	.+2      	; 0x39a <__divsf3_pse+0x56>
 398:	bb 0b       	sbc	r27, r27
 39a:	80 2d       	mov	r24, r0
 39c:	bf 01       	movw	r22, r30
 39e:	ff 27       	eor	r31, r31
 3a0:	93 58       	subi	r25, 0x83	; 131
 3a2:	5f 4f       	sbci	r21, 0xFF	; 255
 3a4:	3a f0       	brmi	.+14     	; 0x3b4 <__divsf3_pse+0x70>
 3a6:	9e 3f       	cpi	r25, 0xFE	; 254
 3a8:	51 05       	cpc	r21, r1
 3aa:	78 f0       	brcs	.+30     	; 0x3ca <__divsf3_pse+0x86>
 3ac:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__fp_inf>
 3b0:	0c 94 bb 02 	jmp	0x576	; 0x576 <__fp_szero>
 3b4:	5f 3f       	cpi	r21, 0xFF	; 255
 3b6:	e4 f3       	brlt	.-8      	; 0x3b0 <__divsf3_pse+0x6c>
 3b8:	98 3e       	cpi	r25, 0xE8	; 232
 3ba:	d4 f3       	brlt	.-12     	; 0x3b0 <__divsf3_pse+0x6c>
 3bc:	86 95       	lsr	r24
 3be:	77 95       	ror	r23
 3c0:	67 95       	ror	r22
 3c2:	b7 95       	ror	r27
 3c4:	f7 95       	ror	r31
 3c6:	9f 5f       	subi	r25, 0xFF	; 255
 3c8:	c9 f7       	brne	.-14     	; 0x3bc <__divsf3_pse+0x78>
 3ca:	88 0f       	add	r24, r24
 3cc:	91 1d       	adc	r25, r1
 3ce:	96 95       	lsr	r25
 3d0:	87 95       	ror	r24
 3d2:	97 f9       	bld	r25, 7
 3d4:	08 95       	ret
 3d6:	e1 e0       	ldi	r30, 0x01	; 1
 3d8:	66 0f       	add	r22, r22
 3da:	77 1f       	adc	r23, r23
 3dc:	88 1f       	adc	r24, r24
 3de:	bb 1f       	adc	r27, r27
 3e0:	62 17       	cp	r22, r18
 3e2:	73 07       	cpc	r23, r19
 3e4:	84 07       	cpc	r24, r20
 3e6:	ba 07       	cpc	r27, r26
 3e8:	20 f0       	brcs	.+8      	; 0x3f2 <__divsf3_pse+0xae>
 3ea:	62 1b       	sub	r22, r18
 3ec:	73 0b       	sbc	r23, r19
 3ee:	84 0b       	sbc	r24, r20
 3f0:	ba 0b       	sbc	r27, r26
 3f2:	ee 1f       	adc	r30, r30
 3f4:	88 f7       	brcc	.-30     	; 0x3d8 <__divsf3_pse+0x94>
 3f6:	e0 95       	com	r30
 3f8:	08 95       	ret

000003fa <__fixsfsi>:
 3fa:	0e 94 04 02 	call	0x408	; 0x408 <__fixunssfsi>
 3fe:	68 94       	set
 400:	b1 11       	cpse	r27, r1
 402:	0c 94 bb 02 	jmp	0x576	; 0x576 <__fp_szero>
 406:	08 95       	ret

00000408 <__fixunssfsi>:
 408:	0e 94 a0 02 	call	0x540	; 0x540 <__fp_splitA>
 40c:	88 f0       	brcs	.+34     	; 0x430 <__fixunssfsi+0x28>
 40e:	9f 57       	subi	r25, 0x7F	; 127
 410:	98 f0       	brcs	.+38     	; 0x438 <__fixunssfsi+0x30>
 412:	b9 2f       	mov	r27, r25
 414:	99 27       	eor	r25, r25
 416:	b7 51       	subi	r27, 0x17	; 23
 418:	b0 f0       	brcs	.+44     	; 0x446 <__fixunssfsi+0x3e>
 41a:	e1 f0       	breq	.+56     	; 0x454 <__fixunssfsi+0x4c>
 41c:	66 0f       	add	r22, r22
 41e:	77 1f       	adc	r23, r23
 420:	88 1f       	adc	r24, r24
 422:	99 1f       	adc	r25, r25
 424:	1a f0       	brmi	.+6      	; 0x42c <__fixunssfsi+0x24>
 426:	ba 95       	dec	r27
 428:	c9 f7       	brne	.-14     	; 0x41c <__fixunssfsi+0x14>
 42a:	14 c0       	rjmp	.+40     	; 0x454 <__fixunssfsi+0x4c>
 42c:	b1 30       	cpi	r27, 0x01	; 1
 42e:	91 f0       	breq	.+36     	; 0x454 <__fixunssfsi+0x4c>
 430:	0e 94 ba 02 	call	0x574	; 0x574 <__fp_zero>
 434:	b1 e0       	ldi	r27, 0x01	; 1
 436:	08 95       	ret
 438:	0c 94 ba 02 	jmp	0x574	; 0x574 <__fp_zero>
 43c:	67 2f       	mov	r22, r23
 43e:	78 2f       	mov	r23, r24
 440:	88 27       	eor	r24, r24
 442:	b8 5f       	subi	r27, 0xF8	; 248
 444:	39 f0       	breq	.+14     	; 0x454 <__fixunssfsi+0x4c>
 446:	b9 3f       	cpi	r27, 0xF9	; 249
 448:	cc f3       	brlt	.-14     	; 0x43c <__fixunssfsi+0x34>
 44a:	86 95       	lsr	r24
 44c:	77 95       	ror	r23
 44e:	67 95       	ror	r22
 450:	b3 95       	inc	r27
 452:	d9 f7       	brne	.-10     	; 0x44a <__fixunssfsi+0x42>
 454:	3e f4       	brtc	.+14     	; 0x464 <__fixunssfsi+0x5c>
 456:	90 95       	com	r25
 458:	80 95       	com	r24
 45a:	70 95       	com	r23
 45c:	61 95       	neg	r22
 45e:	7f 4f       	sbci	r23, 0xFF	; 255
 460:	8f 4f       	sbci	r24, 0xFF	; 255
 462:	9f 4f       	sbci	r25, 0xFF	; 255
 464:	08 95       	ret

00000466 <__floatunsisf>:
 466:	e8 94       	clt
 468:	09 c0       	rjmp	.+18     	; 0x47c <__floatsisf+0x12>

0000046a <__floatsisf>:
 46a:	97 fb       	bst	r25, 7
 46c:	3e f4       	brtc	.+14     	; 0x47c <__floatsisf+0x12>
 46e:	90 95       	com	r25
 470:	80 95       	com	r24
 472:	70 95       	com	r23
 474:	61 95       	neg	r22
 476:	7f 4f       	sbci	r23, 0xFF	; 255
 478:	8f 4f       	sbci	r24, 0xFF	; 255
 47a:	9f 4f       	sbci	r25, 0xFF	; 255
 47c:	99 23       	and	r25, r25
 47e:	a9 f0       	breq	.+42     	; 0x4aa <__floatsisf+0x40>
 480:	f9 2f       	mov	r31, r25
 482:	96 e9       	ldi	r25, 0x96	; 150
 484:	bb 27       	eor	r27, r27
 486:	93 95       	inc	r25
 488:	f6 95       	lsr	r31
 48a:	87 95       	ror	r24
 48c:	77 95       	ror	r23
 48e:	67 95       	ror	r22
 490:	b7 95       	ror	r27
 492:	f1 11       	cpse	r31, r1
 494:	f8 cf       	rjmp	.-16     	; 0x486 <__floatsisf+0x1c>
 496:	fa f4       	brpl	.+62     	; 0x4d6 <__floatsisf+0x6c>
 498:	bb 0f       	add	r27, r27
 49a:	11 f4       	brne	.+4      	; 0x4a0 <__floatsisf+0x36>
 49c:	60 ff       	sbrs	r22, 0
 49e:	1b c0       	rjmp	.+54     	; 0x4d6 <__floatsisf+0x6c>
 4a0:	6f 5f       	subi	r22, 0xFF	; 255
 4a2:	7f 4f       	sbci	r23, 0xFF	; 255
 4a4:	8f 4f       	sbci	r24, 0xFF	; 255
 4a6:	9f 4f       	sbci	r25, 0xFF	; 255
 4a8:	16 c0       	rjmp	.+44     	; 0x4d6 <__floatsisf+0x6c>
 4aa:	88 23       	and	r24, r24
 4ac:	11 f0       	breq	.+4      	; 0x4b2 <__floatsisf+0x48>
 4ae:	96 e9       	ldi	r25, 0x96	; 150
 4b0:	11 c0       	rjmp	.+34     	; 0x4d4 <__floatsisf+0x6a>
 4b2:	77 23       	and	r23, r23
 4b4:	21 f0       	breq	.+8      	; 0x4be <__floatsisf+0x54>
 4b6:	9e e8       	ldi	r25, 0x8E	; 142
 4b8:	87 2f       	mov	r24, r23
 4ba:	76 2f       	mov	r23, r22
 4bc:	05 c0       	rjmp	.+10     	; 0x4c8 <__floatsisf+0x5e>
 4be:	66 23       	and	r22, r22
 4c0:	71 f0       	breq	.+28     	; 0x4de <__floatsisf+0x74>
 4c2:	96 e8       	ldi	r25, 0x86	; 134
 4c4:	86 2f       	mov	r24, r22
 4c6:	70 e0       	ldi	r23, 0x00	; 0
 4c8:	60 e0       	ldi	r22, 0x00	; 0
 4ca:	2a f0       	brmi	.+10     	; 0x4d6 <__floatsisf+0x6c>
 4cc:	9a 95       	dec	r25
 4ce:	66 0f       	add	r22, r22
 4d0:	77 1f       	adc	r23, r23
 4d2:	88 1f       	adc	r24, r24
 4d4:	da f7       	brpl	.-10     	; 0x4cc <__floatsisf+0x62>
 4d6:	88 0f       	add	r24, r24
 4d8:	96 95       	lsr	r25
 4da:	87 95       	ror	r24
 4dc:	97 f9       	bld	r25, 7
 4de:	08 95       	ret

000004e0 <__fp_inf>:
 4e0:	97 f9       	bld	r25, 7
 4e2:	9f 67       	ori	r25, 0x7F	; 127
 4e4:	80 e8       	ldi	r24, 0x80	; 128
 4e6:	70 e0       	ldi	r23, 0x00	; 0
 4e8:	60 e0       	ldi	r22, 0x00	; 0
 4ea:	08 95       	ret

000004ec <__fp_nan>:
 4ec:	9f ef       	ldi	r25, 0xFF	; 255
 4ee:	80 ec       	ldi	r24, 0xC0	; 192
 4f0:	08 95       	ret

000004f2 <__fp_pscA>:
 4f2:	00 24       	eor	r0, r0
 4f4:	0a 94       	dec	r0
 4f6:	16 16       	cp	r1, r22
 4f8:	17 06       	cpc	r1, r23
 4fa:	18 06       	cpc	r1, r24
 4fc:	09 06       	cpc	r0, r25
 4fe:	08 95       	ret

00000500 <__fp_pscB>:
 500:	00 24       	eor	r0, r0
 502:	0a 94       	dec	r0
 504:	12 16       	cp	r1, r18
 506:	13 06       	cpc	r1, r19
 508:	14 06       	cpc	r1, r20
 50a:	05 06       	cpc	r0, r21
 50c:	08 95       	ret

0000050e <__fp_round>:
 50e:	09 2e       	mov	r0, r25
 510:	03 94       	inc	r0
 512:	00 0c       	add	r0, r0
 514:	11 f4       	brne	.+4      	; 0x51a <__fp_round+0xc>
 516:	88 23       	and	r24, r24
 518:	52 f0       	brmi	.+20     	; 0x52e <__fp_round+0x20>
 51a:	bb 0f       	add	r27, r27
 51c:	40 f4       	brcc	.+16     	; 0x52e <__fp_round+0x20>
 51e:	bf 2b       	or	r27, r31
 520:	11 f4       	brne	.+4      	; 0x526 <__fp_round+0x18>
 522:	60 ff       	sbrs	r22, 0
 524:	04 c0       	rjmp	.+8      	; 0x52e <__fp_round+0x20>
 526:	6f 5f       	subi	r22, 0xFF	; 255
 528:	7f 4f       	sbci	r23, 0xFF	; 255
 52a:	8f 4f       	sbci	r24, 0xFF	; 255
 52c:	9f 4f       	sbci	r25, 0xFF	; 255
 52e:	08 95       	ret

00000530 <__fp_split3>:
 530:	57 fd       	sbrc	r21, 7
 532:	90 58       	subi	r25, 0x80	; 128
 534:	44 0f       	add	r20, r20
 536:	55 1f       	adc	r21, r21
 538:	59 f0       	breq	.+22     	; 0x550 <__fp_splitA+0x10>
 53a:	5f 3f       	cpi	r21, 0xFF	; 255
 53c:	71 f0       	breq	.+28     	; 0x55a <__fp_splitA+0x1a>
 53e:	47 95       	ror	r20

00000540 <__fp_splitA>:
 540:	88 0f       	add	r24, r24
 542:	97 fb       	bst	r25, 7
 544:	99 1f       	adc	r25, r25
 546:	61 f0       	breq	.+24     	; 0x560 <__fp_splitA+0x20>
 548:	9f 3f       	cpi	r25, 0xFF	; 255
 54a:	79 f0       	breq	.+30     	; 0x56a <__fp_splitA+0x2a>
 54c:	87 95       	ror	r24
 54e:	08 95       	ret
 550:	12 16       	cp	r1, r18
 552:	13 06       	cpc	r1, r19
 554:	14 06       	cpc	r1, r20
 556:	55 1f       	adc	r21, r21
 558:	f2 cf       	rjmp	.-28     	; 0x53e <__fp_split3+0xe>
 55a:	46 95       	lsr	r20
 55c:	f1 df       	rcall	.-30     	; 0x540 <__fp_splitA>
 55e:	08 c0       	rjmp	.+16     	; 0x570 <__fp_splitA+0x30>
 560:	16 16       	cp	r1, r22
 562:	17 06       	cpc	r1, r23
 564:	18 06       	cpc	r1, r24
 566:	99 1f       	adc	r25, r25
 568:	f1 cf       	rjmp	.-30     	; 0x54c <__fp_splitA+0xc>
 56a:	86 95       	lsr	r24
 56c:	71 05       	cpc	r23, r1
 56e:	61 05       	cpc	r22, r1
 570:	08 94       	sec
 572:	08 95       	ret

00000574 <__fp_zero>:
 574:	e8 94       	clt

00000576 <__fp_szero>:
 576:	bb 27       	eor	r27, r27
 578:	66 27       	eor	r22, r22
 57a:	77 27       	eor	r23, r23
 57c:	cb 01       	movw	r24, r22
 57e:	97 f9       	bld	r25, 7
 580:	08 95       	ret

00000582 <__mulsf3>:
 582:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <__mulsf3x>
 586:	0c 94 87 02 	jmp	0x50e	; 0x50e <__fp_round>
 58a:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__fp_pscA>
 58e:	38 f0       	brcs	.+14     	; 0x59e <__mulsf3+0x1c>
 590:	0e 94 80 02 	call	0x500	; 0x500 <__fp_pscB>
 594:	20 f0       	brcs	.+8      	; 0x59e <__mulsf3+0x1c>
 596:	95 23       	and	r25, r21
 598:	11 f0       	breq	.+4      	; 0x59e <__mulsf3+0x1c>
 59a:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__fp_inf>
 59e:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__fp_nan>
 5a2:	11 24       	eor	r1, r1
 5a4:	0c 94 bb 02 	jmp	0x576	; 0x576 <__fp_szero>

000005a8 <__mulsf3x>:
 5a8:	0e 94 98 02 	call	0x530	; 0x530 <__fp_split3>
 5ac:	70 f3       	brcs	.-36     	; 0x58a <__mulsf3+0x8>

000005ae <__mulsf3_pse>:
 5ae:	95 9f       	mul	r25, r21
 5b0:	c1 f3       	breq	.-16     	; 0x5a2 <__mulsf3+0x20>
 5b2:	95 0f       	add	r25, r21
 5b4:	50 e0       	ldi	r21, 0x00	; 0
 5b6:	55 1f       	adc	r21, r21
 5b8:	62 9f       	mul	r22, r18
 5ba:	f0 01       	movw	r30, r0
 5bc:	72 9f       	mul	r23, r18
 5be:	bb 27       	eor	r27, r27
 5c0:	f0 0d       	add	r31, r0
 5c2:	b1 1d       	adc	r27, r1
 5c4:	63 9f       	mul	r22, r19
 5c6:	aa 27       	eor	r26, r26
 5c8:	f0 0d       	add	r31, r0
 5ca:	b1 1d       	adc	r27, r1
 5cc:	aa 1f       	adc	r26, r26
 5ce:	64 9f       	mul	r22, r20
 5d0:	66 27       	eor	r22, r22
 5d2:	b0 0d       	add	r27, r0
 5d4:	a1 1d       	adc	r26, r1
 5d6:	66 1f       	adc	r22, r22
 5d8:	82 9f       	mul	r24, r18
 5da:	22 27       	eor	r18, r18
 5dc:	b0 0d       	add	r27, r0
 5de:	a1 1d       	adc	r26, r1
 5e0:	62 1f       	adc	r22, r18
 5e2:	73 9f       	mul	r23, r19
 5e4:	b0 0d       	add	r27, r0
 5e6:	a1 1d       	adc	r26, r1
 5e8:	62 1f       	adc	r22, r18
 5ea:	83 9f       	mul	r24, r19
 5ec:	a0 0d       	add	r26, r0
 5ee:	61 1d       	adc	r22, r1
 5f0:	22 1f       	adc	r18, r18
 5f2:	74 9f       	mul	r23, r20
 5f4:	33 27       	eor	r19, r19
 5f6:	a0 0d       	add	r26, r0
 5f8:	61 1d       	adc	r22, r1
 5fa:	23 1f       	adc	r18, r19
 5fc:	84 9f       	mul	r24, r20
 5fe:	60 0d       	add	r22, r0
 600:	21 1d       	adc	r18, r1
 602:	82 2f       	mov	r24, r18
 604:	76 2f       	mov	r23, r22
 606:	6a 2f       	mov	r22, r26
 608:	11 24       	eor	r1, r1
 60a:	9f 57       	subi	r25, 0x7F	; 127
 60c:	50 40       	sbci	r21, 0x00	; 0
 60e:	9a f0       	brmi	.+38     	; 0x636 <__mulsf3_pse+0x88>
 610:	f1 f0       	breq	.+60     	; 0x64e <__mulsf3_pse+0xa0>
 612:	88 23       	and	r24, r24
 614:	4a f0       	brmi	.+18     	; 0x628 <__mulsf3_pse+0x7a>
 616:	ee 0f       	add	r30, r30
 618:	ff 1f       	adc	r31, r31
 61a:	bb 1f       	adc	r27, r27
 61c:	66 1f       	adc	r22, r22
 61e:	77 1f       	adc	r23, r23
 620:	88 1f       	adc	r24, r24
 622:	91 50       	subi	r25, 0x01	; 1
 624:	50 40       	sbci	r21, 0x00	; 0
 626:	a9 f7       	brne	.-22     	; 0x612 <__mulsf3_pse+0x64>
 628:	9e 3f       	cpi	r25, 0xFE	; 254
 62a:	51 05       	cpc	r21, r1
 62c:	80 f0       	brcs	.+32     	; 0x64e <__mulsf3_pse+0xa0>
 62e:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__fp_inf>
 632:	0c 94 bb 02 	jmp	0x576	; 0x576 <__fp_szero>
 636:	5f 3f       	cpi	r21, 0xFF	; 255
 638:	e4 f3       	brlt	.-8      	; 0x632 <__mulsf3_pse+0x84>
 63a:	98 3e       	cpi	r25, 0xE8	; 232
 63c:	d4 f3       	brlt	.-12     	; 0x632 <__mulsf3_pse+0x84>
 63e:	86 95       	lsr	r24
 640:	77 95       	ror	r23
 642:	67 95       	ror	r22
 644:	b7 95       	ror	r27
 646:	f7 95       	ror	r31
 648:	e7 95       	ror	r30
 64a:	9f 5f       	subi	r25, 0xFF	; 255
 64c:	c1 f7       	brne	.-16     	; 0x63e <__mulsf3_pse+0x90>
 64e:	fe 2b       	or	r31, r30
 650:	88 0f       	add	r24, r24
 652:	91 1d       	adc	r25, r1
 654:	96 95       	lsr	r25
 656:	87 95       	ror	r24
 658:	97 f9       	bld	r25, 7
 65a:	08 95       	ret

0000065c <__divmodhi4>:
 65c:	97 fb       	bst	r25, 7
 65e:	07 2e       	mov	r0, r23
 660:	16 f4       	brtc	.+4      	; 0x666 <__divmodhi4+0xa>
 662:	00 94       	com	r0
 664:	07 d0       	rcall	.+14     	; 0x674 <__divmodhi4_neg1>
 666:	77 fd       	sbrc	r23, 7
 668:	09 d0       	rcall	.+18     	; 0x67c <__divmodhi4_neg2>
 66a:	0e 94 42 03 	call	0x684	; 0x684 <__udivmodhi4>
 66e:	07 fc       	sbrc	r0, 7
 670:	05 d0       	rcall	.+10     	; 0x67c <__divmodhi4_neg2>
 672:	3e f4       	brtc	.+14     	; 0x682 <__divmodhi4_exit>

00000674 <__divmodhi4_neg1>:
 674:	90 95       	com	r25
 676:	81 95       	neg	r24
 678:	9f 4f       	sbci	r25, 0xFF	; 255
 67a:	08 95       	ret

0000067c <__divmodhi4_neg2>:
 67c:	70 95       	com	r23
 67e:	61 95       	neg	r22
 680:	7f 4f       	sbci	r23, 0xFF	; 255

00000682 <__divmodhi4_exit>:
 682:	08 95       	ret

00000684 <__udivmodhi4>:
 684:	aa 1b       	sub	r26, r26
 686:	bb 1b       	sub	r27, r27
 688:	51 e1       	ldi	r21, 0x11	; 17
 68a:	07 c0       	rjmp	.+14     	; 0x69a <__udivmodhi4_ep>

0000068c <__udivmodhi4_loop>:
 68c:	aa 1f       	adc	r26, r26
 68e:	bb 1f       	adc	r27, r27
 690:	a6 17       	cp	r26, r22
 692:	b7 07       	cpc	r27, r23
 694:	10 f0       	brcs	.+4      	; 0x69a <__udivmodhi4_ep>
 696:	a6 1b       	sub	r26, r22
 698:	b7 0b       	sbc	r27, r23

0000069a <__udivmodhi4_ep>:
 69a:	88 1f       	adc	r24, r24
 69c:	99 1f       	adc	r25, r25
 69e:	5a 95       	dec	r21
 6a0:	a9 f7       	brne	.-22     	; 0x68c <__udivmodhi4_loop>
 6a2:	80 95       	com	r24
 6a4:	90 95       	com	r25
 6a6:	bc 01       	movw	r22, r24
 6a8:	cd 01       	movw	r24, r26
 6aa:	08 95       	ret

000006ac <_exit>:
 6ac:	f8 94       	cli

000006ae <__stop_program>:
 6ae:	ff cf       	rjmp	.-2      	; 0x6ae <__stop_program>
