
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c0  00800100  000006f6  0000078a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  008001c0  008001c0  0000084a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000084a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000087c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000008bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000197b  00000000  00000000  00000964  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bf1  00000000  00000000  000022df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008d8  00000000  00000000  00002ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000020c  00000000  00000000  000037a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000066f  00000000  00000000  000039b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000be9  00000000  00000000  00004023  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00004c0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e6 ef       	ldi	r30, 0xF6	; 246
  c8:	f6 e0       	ldi	r31, 0x06	; 6
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a0 3c       	cpi	r26, 0xC0	; 192
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a0 ec       	ldi	r26, 0xC0	; 192
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a4 3e       	cpi	r26, 0xE4	; 228
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 c0 02 	call	0x580	; 0x580 <main>
  ea:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <i2c_init>:
	data[(length-1)] = i2c_read_nack();
	
	i2c_stop();
	
	return 0;
}
  f2:	88 e4       	ldi	r24, 0x48	; 72
  f4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  f8:	08 95       	ret

000000fa <i2c_start>:
  fa:	ec eb       	ldi	r30, 0xBC	; 188
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	10 82       	st	Z, r1
 100:	94 ea       	ldi	r25, 0xA4	; 164
 102:	90 83       	st	Z, r25
 104:	90 81       	ld	r25, Z
 106:	99 23       	and	r25, r25
 108:	ec f7       	brge	.-6      	; 0x104 <i2c_start+0xa>
 10a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 10e:	98 7f       	andi	r25, 0xF8	; 248
 110:	98 30       	cpi	r25, 0x08	; 8
 112:	a1 f4       	brne	.+40     	; 0x13c <i2c_start+0x42>
 114:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 118:	84 e8       	ldi	r24, 0x84	; 132
 11a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 11e:	ec eb       	ldi	r30, 0xBC	; 188
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	88 23       	and	r24, r24
 126:	ec f7       	brge	.-6      	; 0x122 <i2c_start+0x28>
 128:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 12c:	98 7f       	andi	r25, 0xF8	; 248
 12e:	98 31       	cpi	r25, 0x18	; 24
 130:	39 f0       	breq	.+14     	; 0x140 <i2c_start+0x46>
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 34       	cpi	r25, 0x40	; 64
 136:	29 f4       	brne	.+10     	; 0x142 <i2c_start+0x48>
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	08 95       	ret
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	08 95       	ret
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	08 95       	ret

00000144 <i2c_write>:
 144:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 148:	84 e8       	ldi	r24, 0x84	; 132
 14a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 14e:	ec eb       	ldi	r30, 0xBC	; 188
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	88 23       	and	r24, r24
 156:	ec f7       	brge	.-6      	; 0x152 <i2c_write+0xe>
 158:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 15c:	98 7f       	andi	r25, 0xF8	; 248
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	98 32       	cpi	r25, 0x28	; 40
 162:	09 f4       	brne	.+2      	; 0x166 <i2c_write+0x22>
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	08 95       	ret

00000168 <i2c_read_ack>:
 168:	84 ec       	ldi	r24, 0xC4	; 196
 16a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 16e:	ec eb       	ldi	r30, 0xBC	; 188
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	88 23       	and	r24, r24
 176:	ec f7       	brge	.-6      	; 0x172 <i2c_read_ack+0xa>
 178:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 17c:	08 95       	ret

0000017e <i2c_read_nack>:
 17e:	84 e8       	ldi	r24, 0x84	; 132
 180:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 184:	ec eb       	ldi	r30, 0xBC	; 188
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	88 23       	and	r24, r24
 18c:	ec f7       	brge	.-6      	; 0x188 <i2c_read_nack+0xa>
 18e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 192:	08 95       	ret

00000194 <i2c_writeReg>:

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
 194:	cf 92       	push	r12
 196:	df 92       	push	r13
 198:	ff 92       	push	r15
 19a:	0f 93       	push	r16
 19c:	1f 93       	push	r17
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	c6 2f       	mov	r28, r22
 1a4:	6a 01       	movw	r12, r20
 1a6:	89 01       	movw	r16, r18
	if (i2c_start(devaddr | 0x00)) return 1;
 1a8:	0e 94 7d 00 	call	0xfa	; 0xfa <i2c_start>
 1ac:	f8 2e       	mov	r15, r24
 1ae:	81 11       	cpse	r24, r1
 1b0:	15 c0       	rjmp	.+42     	; 0x1dc <i2c_writeReg+0x48>

	i2c_write(regaddr);
 1b2:	8c 2f       	mov	r24, r28
 1b4:	0e 94 a2 00 	call	0x144	; 0x144 <i2c_write>

	for (uint16_t i = 0; i < length; i++)
 1b8:	01 15       	cp	r16, r1
 1ba:	11 05       	cpc	r17, r1
 1bc:	59 f0       	breq	.+22     	; 0x1d4 <i2c_writeReg+0x40>
 1be:	e6 01       	movw	r28, r12
 1c0:	0c 0d       	add	r16, r12
 1c2:	1d 1d       	adc	r17, r13
	{
		if (i2c_write(data[i])) return 1;
 1c4:	89 91       	ld	r24, Y+
 1c6:	0e 94 a2 00 	call	0x144	; 0x144 <i2c_write>
 1ca:	81 11       	cpse	r24, r1
 1cc:	0a c0       	rjmp	.+20     	; 0x1e2 <i2c_writeReg+0x4e>
{
	if (i2c_start(devaddr | 0x00)) return 1;

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
 1ce:	c0 17       	cp	r28, r16
 1d0:	d1 07       	cpc	r29, r17
 1d2:	c1 f7       	brne	.-16     	; 0x1c4 <i2c_writeReg+0x30>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR0 = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 1d4:	84 e9       	ldi	r24, 0x94	; 148
 1d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1da:	05 c0       	rjmp	.+10     	; 0x1e6 <i2c_writeReg+0x52>
	return 0;
}

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr | 0x00)) return 1;
 1dc:	ff 24       	eor	r15, r15
 1de:	f3 94       	inc	r15
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <i2c_writeReg+0x52>

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
 1e2:	ff 24       	eor	r15, r15
 1e4:	f3 94       	inc	r15
	}

	i2c_stop();

	return 0;
}
 1e6:	8f 2d       	mov	r24, r15
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	1f 91       	pop	r17
 1ee:	0f 91       	pop	r16
 1f0:	ff 90       	pop	r15
 1f2:	df 90       	pop	r13
 1f4:	cf 90       	pop	r12
 1f6:	08 95       	ret

000001f8 <i2c_readReg>:

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
 1f8:	af 92       	push	r10
 1fa:	bf 92       	push	r11
 1fc:	df 92       	push	r13
 1fe:	ef 92       	push	r14
 200:	ff 92       	push	r15
 202:	0f 93       	push	r16
 204:	1f 93       	push	r17
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
 20a:	18 2f       	mov	r17, r24
 20c:	06 2f       	mov	r16, r22
 20e:	5a 01       	movw	r10, r20
 210:	e9 01       	movw	r28, r18
	if (i2c_start(devaddr)) return 1;
 212:	0e 94 7d 00 	call	0xfa	; 0xfa <i2c_start>
 216:	81 11       	cpse	r24, r1
 218:	22 c0       	rjmp	.+68     	; 0x25e <i2c_readReg+0x66>

	i2c_write(regaddr);
 21a:	80 2f       	mov	r24, r16
 21c:	0e 94 a2 00 	call	0x144	; 0x144 <i2c_write>

	if (i2c_start(devaddr | 0x01)) return 1;
 220:	81 2f       	mov	r24, r17
 222:	81 60       	ori	r24, 0x01	; 1
 224:	0e 94 7d 00 	call	0xfa	; 0xfa <i2c_start>
 228:	d8 2e       	mov	r13, r24
 22a:	81 11       	cpse	r24, r1
 22c:	1b c0       	rjmp	.+54     	; 0x264 <i2c_readReg+0x6c>

	for (uint16_t i = 0; i < (length-1); i++)
 22e:	8e 01       	movw	r16, r28
 230:	01 50       	subi	r16, 0x01	; 1
 232:	11 09       	sbc	r17, r1
 234:	51 f0       	breq	.+20     	; 0x24a <i2c_readReg+0x52>
 236:	e5 01       	movw	r28, r10
 238:	75 01       	movw	r14, r10
 23a:	e0 0e       	add	r14, r16
 23c:	f1 1e       	adc	r15, r17
	{
		data[i] = i2c_read_ack();
 23e:	0e 94 b4 00 	call	0x168	; 0x168 <i2c_read_ack>
 242:	89 93       	st	Y+, r24

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;

	for (uint16_t i = 0; i < (length-1); i++)
 244:	ec 16       	cp	r14, r28
 246:	fd 06       	cpc	r15, r29
 248:	d1 f7       	brne	.-12     	; 0x23e <i2c_readReg+0x46>
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
 24a:	e5 01       	movw	r28, r10
 24c:	c0 0f       	add	r28, r16
 24e:	d1 1f       	adc	r29, r17
 250:	0e 94 bf 00 	call	0x17e	; 0x17e <i2c_read_nack>
 254:	88 83       	st	Y, r24
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR0 = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 256:	84 e9       	ldi	r24, 0x94	; 148
 258:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 25c:	05 c0       	rjmp	.+10     	; 0x268 <i2c_readReg+0x70>
	return 0;
}

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr)) return 1;
 25e:	dd 24       	eor	r13, r13
 260:	d3 94       	inc	r13
 262:	02 c0       	rjmp	.+4      	; 0x268 <i2c_readReg+0x70>

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;
 264:	dd 24       	eor	r13, r13
 266:	d3 94       	inc	r13
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
 268:	8d 2d       	mov	r24, r13
 26a:	df 91       	pop	r29
 26c:	cf 91       	pop	r28
 26e:	1f 91       	pop	r17
 270:	0f 91       	pop	r16
 272:	ff 90       	pop	r15
 274:	ef 90       	pop	r14
 276:	df 90       	pop	r13
 278:	bf 90       	pop	r11
 27a:	af 90       	pop	r10
 27c:	08 95       	ret

0000027e <init_APDS9960>:
	
	return 0;
}


void init_APDS9960(void){
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
 282:	1f 92       	push	r1
 284:	cd b7       	in	r28, 0x3d	; 61
 286:	de b7       	in	r29, 0x3e	; 62
	uint8_t setup;
	
	i2c_readReg(APDS9960_WRITE, APDS9960_ID, &setup,1);
 288:	21 e0       	ldi	r18, 0x01	; 1
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	ae 01       	movw	r20, r28
 28e:	4f 5f       	subi	r20, 0xFF	; 255
 290:	5f 4f       	sbci	r21, 0xFF	; 255
 292:	62 e9       	ldi	r22, 0x92	; 146
 294:	82 e7       	ldi	r24, 0x72	; 114
 296:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <i2c_readReg>
	if(setup != APDS9960_ID_1) while(1);
 29a:	89 81       	ldd	r24, Y+1	; 0x01
 29c:	8b 3a       	cpi	r24, 0xAB	; 171
 29e:	09 f0       	breq	.+2      	; 0x2a2 <init_APDS9960+0x24>
 2a0:	ff cf       	rjmp	.-2      	; 0x2a0 <init_APDS9960+0x22>
	setup = 1 << 1 | 1<<0 | 1<<3 | 1<<4;
 2a2:	8b e1       	ldi	r24, 0x1B	; 27
 2a4:	89 83       	std	Y+1, r24	; 0x01
	
	i2c_writeReg(APDS9960_WRITE, APDS9960_ENABLE, &setup, 1);
 2a6:	21 e0       	ldi	r18, 0x01	; 1
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	ae 01       	movw	r20, r28
 2ac:	4f 5f       	subi	r20, 0xFF	; 255
 2ae:	5f 4f       	sbci	r21, 0xFF	; 255
 2b0:	60 e8       	ldi	r22, 0x80	; 128
 2b2:	82 e7       	ldi	r24, 0x72	; 114
 2b4:	0e 94 ca 00 	call	0x194	; 0x194 <i2c_writeReg>
	setup = DEFAULT_ATIME;
 2b8:	8b ed       	ldi	r24, 0xDB	; 219
 2ba:	89 83       	std	Y+1, r24	; 0x01
	
	i2c_writeReg(APDS9960_WRITE, APDS9960_ATIME, &setup, 1);
 2bc:	21 e0       	ldi	r18, 0x01	; 1
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	ae 01       	movw	r20, r28
 2c2:	4f 5f       	subi	r20, 0xFF	; 255
 2c4:	5f 4f       	sbci	r21, 0xFF	; 255
 2c6:	61 e8       	ldi	r22, 0x81	; 129
 2c8:	82 e7       	ldi	r24, 0x72	; 114
 2ca:	0e 94 ca 00 	call	0x194	; 0x194 <i2c_writeReg>
	setup = DEFAULT_WTIME;
 2ce:	86 ef       	ldi	r24, 0xF6	; 246
 2d0:	89 83       	std	Y+1, r24	; 0x01
	
	i2c_writeReg(APDS9960_WRITE, APDS9960_WTIME, &setup, 1);
 2d2:	21 e0       	ldi	r18, 0x01	; 1
 2d4:	30 e0       	ldi	r19, 0x00	; 0
 2d6:	ae 01       	movw	r20, r28
 2d8:	4f 5f       	subi	r20, 0xFF	; 255
 2da:	5f 4f       	sbci	r21, 0xFF	; 255
 2dc:	63 e8       	ldi	r22, 0x83	; 131
 2de:	82 e7       	ldi	r24, 0x72	; 114
 2e0:	0e 94 ca 00 	call	0x194	; 0x194 <i2c_writeReg>
	setup = DEFAULT_PROX_PPULSE;
 2e4:	87 e8       	ldi	r24, 0x87	; 135
 2e6:	89 83       	std	Y+1, r24	; 0x01
	
	i2c_writeReg(APDS9960_WRITE, APDS9960_PPULSE, &setup, 1);
 2e8:	21 e0       	ldi	r18, 0x01	; 1
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	ae 01       	movw	r20, r28
 2ee:	4f 5f       	subi	r20, 0xFF	; 255
 2f0:	5f 4f       	sbci	r21, 0xFF	; 255
 2f2:	6e e8       	ldi	r22, 0x8E	; 142
 2f4:	82 e7       	ldi	r24, 0x72	; 114
 2f6:	0e 94 ca 00 	call	0x194	; 0x194 <i2c_writeReg>
	setup = DEFAULT_POFFSET_UR;
 2fa:	19 82       	std	Y+1, r1	; 0x01
	
	i2c_writeReg(APDS9960_WRITE, APDS9960_POFFSET_UR, &setup, 1);
 2fc:	21 e0       	ldi	r18, 0x01	; 1
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	ae 01       	movw	r20, r28
 302:	4f 5f       	subi	r20, 0xFF	; 255
 304:	5f 4f       	sbci	r21, 0xFF	; 255
 306:	6d e9       	ldi	r22, 0x9D	; 157
 308:	82 e7       	ldi	r24, 0x72	; 114
 30a:	0e 94 ca 00 	call	0x194	; 0x194 <i2c_writeReg>
	setup = DEFAULT_POFFSET_DL;
 30e:	19 82       	std	Y+1, r1	; 0x01
	
	i2c_writeReg(APDS9960_WRITE, APDS9960_POFFSET_DL, &setup, 1);
 310:	21 e0       	ldi	r18, 0x01	; 1
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	ae 01       	movw	r20, r28
 316:	4f 5f       	subi	r20, 0xFF	; 255
 318:	5f 4f       	sbci	r21, 0xFF	; 255
 31a:	6e e9       	ldi	r22, 0x9E	; 158
 31c:	82 e7       	ldi	r24, 0x72	; 114
 31e:	0e 94 ca 00 	call	0x194	; 0x194 <i2c_writeReg>
	setup = DEFAULT_CONFIG1;
 322:	80 e6       	ldi	r24, 0x60	; 96
 324:	89 83       	std	Y+1, r24	; 0x01
	
	i2c_writeReg(APDS9960_WRITE, APDS9960_CONFIG1, &setup, 1);
 326:	21 e0       	ldi	r18, 0x01	; 1
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	ae 01       	movw	r20, r28
 32c:	4f 5f       	subi	r20, 0xFF	; 255
 32e:	5f 4f       	sbci	r21, 0xFF	; 255
 330:	6d e8       	ldi	r22, 0x8D	; 141
 332:	82 e7       	ldi	r24, 0x72	; 114
 334:	0e 94 ca 00 	call	0x194	; 0x194 <i2c_writeReg>
	setup = DEFAULT_PERS;
 338:	81 e1       	ldi	r24, 0x11	; 17
 33a:	89 83       	std	Y+1, r24	; 0x01
	
	i2c_writeReg(APDS9960_WRITE, APDS9960_PERS, &setup, 1);
 33c:	21 e0       	ldi	r18, 0x01	; 1
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	ae 01       	movw	r20, r28
 342:	4f 5f       	subi	r20, 0xFF	; 255
 344:	5f 4f       	sbci	r21, 0xFF	; 255
 346:	6c e8       	ldi	r22, 0x8C	; 140
 348:	82 e7       	ldi	r24, 0x72	; 114
 34a:	0e 94 ca 00 	call	0x194	; 0x194 <i2c_writeReg>
	setup = DEFAULT_CONFIG2;
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	89 83       	std	Y+1, r24	; 0x01
	
	i2c_writeReg(APDS9960_WRITE, APDS9960_CONFIG2, &setup, 1);
 352:	21 e0       	ldi	r18, 0x01	; 1
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	ae 01       	movw	r20, r28
 358:	4f 5f       	subi	r20, 0xFF	; 255
 35a:	5f 4f       	sbci	r21, 0xFF	; 255
 35c:	60 e9       	ldi	r22, 0x90	; 144
 35e:	82 e7       	ldi	r24, 0x72	; 114
 360:	0e 94 ca 00 	call	0x194	; 0x194 <i2c_writeReg>
	setup = DEFAULT_CONFIG3;
 364:	19 82       	std	Y+1, r1	; 0x01
	
	i2c_writeReg(APDS9960_WRITE, APDS9960_CONFIG3, &setup, 1);
 366:	21 e0       	ldi	r18, 0x01	; 1
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	ae 01       	movw	r20, r28
 36c:	4f 5f       	subi	r20, 0xFF	; 255
 36e:	5f 4f       	sbci	r21, 0xFF	; 255
 370:	6f e9       	ldi	r22, 0x9F	; 159
 372:	82 e7       	ldi	r24, 0x72	; 114
 374:	0e 94 ca 00 	call	0x194	; 0x194 <i2c_writeReg>
	
}
 378:	0f 90       	pop	r0
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	08 95       	ret

00000380 <getValues>:
 

void getValues(void){
 380:	cf 92       	push	r12
 382:	df 92       	push	r13
 384:	ef 92       	push	r14
 386:	ff 92       	push	r15
 388:	0f 93       	push	r16
 38a:	1f 93       	push	r17
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	cd b7       	in	r28, 0x3d	; 61
 392:	de b7       	in	r29, 0x3e	; 62
 394:	60 97       	sbiw	r28, 0x10	; 16
 396:	0f b6       	in	r0, 0x3f	; 63
 398:	f8 94       	cli
 39a:	de bf       	out	0x3e, r29	; 62
 39c:	0f be       	out	0x3f, r0	; 63
 39e:	cd bf       	out	0x3d, r28	; 61
unsigned char i;
char dummy[10];


// Read red value
i2c_readReg(APDS9960_WRITE, APDS9960_RDATAH, &redVH, 1);
 3a0:	21 e0       	ldi	r18, 0x01	; 1
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	ae 01       	movw	r20, r28
 3a6:	4f 5f       	subi	r20, 0xFF	; 255
 3a8:	5f 4f       	sbci	r21, 0xFF	; 255
 3aa:	67 e9       	ldi	r22, 0x97	; 151
 3ac:	82 e7       	ldi	r24, 0x72	; 114
 3ae:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <i2c_readReg>
i2c_readReg(APDS9960_WRITE, APDS9960_RDATAL, &redVL, 1);
 3b2:	21 e0       	ldi	r18, 0x01	; 1
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	ae 01       	movw	r20, r28
 3b8:	4e 5f       	subi	r20, 0xFE	; 254
 3ba:	5f 4f       	sbci	r21, 0xFF	; 255
 3bc:	66 e9       	ldi	r22, 0x96	; 150
 3be:	82 e7       	ldi	r24, 0x72	; 114
 3c0:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <i2c_readReg>

// Read green value
i2c_readReg(APDS9960_WRITE, APDS9960_GDATAH, &greenVH, 1);
 3c4:	21 e0       	ldi	r18, 0x01	; 1
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	ae 01       	movw	r20, r28
 3ca:	4d 5f       	subi	r20, 0xFD	; 253
 3cc:	5f 4f       	sbci	r21, 0xFF	; 255
 3ce:	69 e9       	ldi	r22, 0x99	; 153
 3d0:	82 e7       	ldi	r24, 0x72	; 114
 3d2:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <i2c_readReg>
i2c_readReg(APDS9960_WRITE, APDS9960_GDATAL, &greenVL, 1);
 3d6:	21 e0       	ldi	r18, 0x01	; 1
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	ae 01       	movw	r20, r28
 3dc:	4c 5f       	subi	r20, 0xFC	; 252
 3de:	5f 4f       	sbci	r21, 0xFF	; 255
 3e0:	68 e9       	ldi	r22, 0x98	; 152
 3e2:	82 e7       	ldi	r24, 0x72	; 114
 3e4:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <i2c_readReg>

// Read blue value 
i2c_readReg(APDS9960_WRITE, APDS9960_BDATAH, &blueVH, 1);
 3e8:	21 e0       	ldi	r18, 0x01	; 1
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	ae 01       	movw	r20, r28
 3ee:	4b 5f       	subi	r20, 0xFB	; 251
 3f0:	5f 4f       	sbci	r21, 0xFF	; 255
 3f2:	6b e9       	ldi	r22, 0x9B	; 155
 3f4:	82 e7       	ldi	r24, 0x72	; 114
 3f6:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <i2c_readReg>
i2c_readReg(APDS9960_WRITE, APDS9960_BDATAL, &blueVL, 1);
 3fa:	21 e0       	ldi	r18, 0x01	; 1
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	ae 01       	movw	r20, r28
 400:	4a 5f       	subi	r20, 0xFA	; 250
 402:	5f 4f       	sbci	r21, 0xFF	; 255
 404:	6a e9       	ldi	r22, 0x9A	; 154
 406:	82 e7       	ldi	r24, 0x72	; 114
 408:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <i2c_readReg>

redVal = (redVH << 8) | redVL;
 40c:	49 81       	ldd	r20, Y+1	; 0x01
 40e:	50 e0       	ldi	r21, 0x00	; 0
 410:	54 2f       	mov	r21, r20
 412:	44 27       	eor	r20, r20
 414:	8a 81       	ldd	r24, Y+2	; 0x02
 416:	48 2b       	or	r20, r24
 418:	50 93 d7 01 	sts	0x01D7, r21	; 0x8001d7 <redVal+0x1>
 41c:	40 93 d6 01 	sts	0x01D6, r20	; 0x8001d6 <redVal>
greenVal = (greenVH << 8) | greenVL;
 420:	2b 81       	ldd	r18, Y+3	; 0x03
 422:	30 e0       	ldi	r19, 0x00	; 0
 424:	32 2f       	mov	r19, r18
 426:	22 27       	eor	r18, r18
 428:	8c 81       	ldd	r24, Y+4	; 0x04
 42a:	28 2b       	or	r18, r24
 42c:	30 93 d5 01 	sts	0x01D5, r19	; 0x8001d5 <greenVal+0x1>
 430:	20 93 d4 01 	sts	0x01D4, r18	; 0x8001d4 <greenVal>
blueVal = (blueVH << 8) | blueVL;
 434:	8d 81       	ldd	r24, Y+5	; 0x05
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	98 2f       	mov	r25, r24
 43a:	88 27       	eor	r24, r24
 43c:	6e 81       	ldd	r22, Y+6	; 0x06
 43e:	86 2b       	or	r24, r22
 440:	90 93 d9 01 	sts	0x01D9, r25	; 0x8001d9 <blueVal+0x1>
 444:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <blueVal>

// Set max threshold values
if (redVal > 255){
 448:	4f 3f       	cpi	r20, 0xFF	; 255
 44a:	51 05       	cpc	r21, r1
 44c:	39 f0       	breq	.+14     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 44e:	30 f0       	brcs	.+12     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
redVal = 255;
 450:	4f ef       	ldi	r20, 0xFF	; 255
 452:	50 e0       	ldi	r21, 0x00	; 0
 454:	50 93 d7 01 	sts	0x01D7, r21	; 0x8001d7 <redVal+0x1>
 458:	40 93 d6 01 	sts	0x01D6, r20	; 0x8001d6 <redVal>
}
if (greenVal > 255){
 45c:	2f 3f       	cpi	r18, 0xFF	; 255
 45e:	31 05       	cpc	r19, r1
 460:	39 f0       	breq	.+14     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 462:	30 f0       	brcs	.+12     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
greenVal = 255;
 464:	2f ef       	ldi	r18, 0xFF	; 255
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	30 93 d5 01 	sts	0x01D5, r19	; 0x8001d5 <greenVal+0x1>
 46c:	20 93 d4 01 	sts	0x01D4, r18	; 0x8001d4 <greenVal>
}
if (blueVal > 255){
 470:	8f 3f       	cpi	r24, 0xFF	; 255
 472:	91 05       	cpc	r25, r1
 474:	39 f0       	breq	.+14     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 476:	30 f0       	brcs	.+12     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
blueVal = 255;
 478:	8f ef       	ldi	r24, 0xFF	; 255
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	90 93 d9 01 	sts	0x01D9, r25	; 0x8001d9 <blueVal+0x1>
 480:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <blueVal>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 484:	8e 01       	movw	r16, r28
 486:	09 5f       	subi	r16, 0xF9	; 249
 488:	1f 4f       	sbci	r17, 0xFF	; 255
 48a:	4a e0       	ldi	r20, 0x0A	; 10
 48c:	b8 01       	movw	r22, r16
 48e:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <redVal>
 492:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <redVal+0x1>
 496:	0e 94 44 03 	call	0x688	; 0x688 <__itoa_ncheck>
 49a:	78 01       	movw	r14, r16
 49c:	6e 01       	movw	r12, r28
 49e:	81 e1       	ldi	r24, 0x11	; 17
 4a0:	c8 0e       	add	r12, r24
 4a2:	d1 1c       	adc	r13, r1
 4a4:	f8 01       	movw	r30, r16
 4a6:	df 01       	movw	r26, r30
 4a8:	ae 19       	sub	r26, r14
 4aa:	bf 09       	sbc	r27, r15
}
	
	itoa(redVal, dummy, 10); //convert char to ascii
	for(i = 0 ; i < 10 ; i++){
		RedStr[i] = dummy[i]; //move converted ascii
 4ac:	81 91       	ld	r24, Z+
 4ae:	a6 52       	subi	r26, 0x26	; 38
 4b0:	be 4f       	sbci	r27, 0xFE	; 254
 4b2:	8c 93       	st	X, r24
if (blueVal > 255){
blueVal = 255;
}
	
	itoa(redVal, dummy, 10); //convert char to ascii
	for(i = 0 ; i < 10 ; i++){
 4b4:	ec 15       	cp	r30, r12
 4b6:	fd 05       	cpc	r31, r13
 4b8:	b1 f7       	brne	.-20     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 4ba:	4a e0       	ldi	r20, 0x0A	; 10
 4bc:	be 01       	movw	r22, r28
 4be:	69 5f       	subi	r22, 0xF9	; 249
 4c0:	7f 4f       	sbci	r23, 0xFF	; 255
 4c2:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <greenVal>
 4c6:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <greenVal+0x1>
 4ca:	0e 94 44 03 	call	0x688	; 0x688 <__itoa_ncheck>
 4ce:	f7 01       	movw	r30, r14
 4d0:	df 01       	movw	r26, r30
 4d2:	ae 19       	sub	r26, r14
 4d4:	bf 09       	sbc	r27, r15
		RedStr[i] = dummy[i]; //move converted ascii
	}	
	itoa(greenVal, dummy, 10); //convert char to ascii
	for(i = 0 ; i < 10 ; i++){
		GreenStr[i] = dummy[i]; //move converted ascii
 4d6:	81 91       	ld	r24, Z+
 4d8:	a0 54       	subi	r26, 0x40	; 64
 4da:	be 4f       	sbci	r27, 0xFE	; 254
 4dc:	8c 93       	st	X, r24
	itoa(redVal, dummy, 10); //convert char to ascii
	for(i = 0 ; i < 10 ; i++){
		RedStr[i] = dummy[i]; //move converted ascii
	}	
	itoa(greenVal, dummy, 10); //convert char to ascii
	for(i = 0 ; i < 10 ; i++){
 4de:	ec 15       	cp	r30, r12
 4e0:	fd 05       	cpc	r31, r13
 4e2:	b1 f7       	brne	.-20     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 4e4:	4a e0       	ldi	r20, 0x0A	; 10
 4e6:	be 01       	movw	r22, r28
 4e8:	69 5f       	subi	r22, 0xF9	; 249
 4ea:	7f 4f       	sbci	r23, 0xFF	; 255
 4ec:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <blueVal>
 4f0:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <blueVal+0x1>
 4f4:	0e 94 44 03 	call	0x688	; 0x688 <__itoa_ncheck>
 4f8:	f7 01       	movw	r30, r14
 4fa:	df 01       	movw	r26, r30
 4fc:	ae 19       	sub	r26, r14
 4fe:	bf 09       	sbc	r27, r15
		GreenStr[i] = dummy[i]; //move converted ascii
	}	
	itoa(blueVal, dummy, 10); //convert char to ascii
	for(i = 0 ; i < 10 ; i++){
		BlueStr[i] = dummy[i]; //move converted ascii
 500:	81 91       	ld	r24, Z+
 502:	a6 53       	subi	r26, 0x36	; 54
 504:	be 4f       	sbci	r27, 0xFE	; 254
 506:	8c 93       	st	X, r24
	itoa(greenVal, dummy, 10); //convert char to ascii
	for(i = 0 ; i < 10 ; i++){
		GreenStr[i] = dummy[i]; //move converted ascii
	}	
	itoa(blueVal, dummy, 10); //convert char to ascii
	for(i = 0 ; i < 10 ; i++){
 508:	ec 15       	cp	r30, r12
 50a:	fd 05       	cpc	r31, r13
 50c:	b1 f7       	brne	.-20     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
		BlueStr[i] = dummy[i]; //move converted ascii
	}
	
	
}
 50e:	60 96       	adiw	r28, 0x10	; 16
 510:	0f b6       	in	r0, 0x3f	; 63
 512:	f8 94       	cli
 514:	de bf       	out	0x3e, r29	; 62
 516:	0f be       	out	0x3f, r0	; 63
 518:	cd bf       	out	0x3d, r28	; 61
 51a:	df 91       	pop	r29
 51c:	cf 91       	pop	r28
 51e:	1f 91       	pop	r17
 520:	0f 91       	pop	r16
 522:	ff 90       	pop	r15
 524:	ef 90       	pop	r14
 526:	df 90       	pop	r13
 528:	cf 90       	pop	r12
 52a:	08 95       	ret

0000052c <usart_init>:

void usart_init() {
	UBRR0H = ((UBRR) >> 8);
 52c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRR;
 530:	80 e1       	ldi	r24, 0x10	; 16
 532:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0A |= (1<< U2X0); // divisor baud = 8
 536:	e0 ec       	ldi	r30, 0xC0	; 192
 538:	f0 e0       	ldi	r31, 0x00	; 0
 53a:	80 81       	ld	r24, Z
 53c:	82 60       	ori	r24, 0x02	; 2
 53e:	80 83       	st	Z, r24
	UCSR0B |= (1 << TXEN0); // Enable transmission
 540:	e1 ec       	ldi	r30, 0xC1	; 193
 542:	f0 e0       	ldi	r31, 0x00	; 0
 544:	80 81       	ld	r24, Z
 546:	88 60       	ori	r24, 0x08	; 8
 548:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00); // 8 bits
 54a:	e2 ec       	ldi	r30, 0xC2	; 194
 54c:	f0 e0       	ldi	r31, 0x00	; 0
 54e:	80 81       	ld	r24, Z
 550:	86 60       	ori	r24, 0x06	; 6
 552:	80 83       	st	Z, r24
 554:	08 95       	ret

00000556 <USART_putstring>:
}

void USART_putstring(volatile unsigned char *StringPtr)
{
 556:	cf 93       	push	r28
 558:	df 93       	push	r29
 55a:	dc 01       	movw	r26, r24
	while ((*StringPtr != '\0')){ 
 55c:	8c 91       	ld	r24, X
 55e:	88 23       	and	r24, r24
 560:	61 f0       	breq	.+24     	; 0x57a <USART_putstring+0x24>
		while (!(UCSR0A & (1 << UDRE0))); 
 562:	e0 ec       	ldi	r30, 0xC0	; 192
 564:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = *StringPtr; 
 566:	c6 ec       	ldi	r28, 0xC6	; 198
 568:	d0 e0       	ldi	r29, 0x00	; 0
}

void USART_putstring(volatile unsigned char *StringPtr)
{
	while ((*StringPtr != '\0')){ 
		while (!(UCSR0A & (1 << UDRE0))); 
 56a:	90 81       	ld	r25, Z
 56c:	95 ff       	sbrs	r25, 5
 56e:	fd cf       	rjmp	.-6      	; 0x56a <USART_putstring+0x14>
		UDR0 = *StringPtr; 
 570:	8d 91       	ld	r24, X+
 572:	88 83       	st	Y, r24
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00); // 8 bits
}

void USART_putstring(volatile unsigned char *StringPtr)
{
	while ((*StringPtr != '\0')){ 
 574:	8c 91       	ld	r24, X
 576:	81 11       	cpse	r24, r1
 578:	f8 cf       	rjmp	.-16     	; 0x56a <USART_putstring+0x14>
		while (!(UCSR0A & (1 << UDRE0))); 
		UDR0 = *StringPtr; 
		StringPtr++; 
	}
}
 57a:	df 91       	pop	r29
 57c:	cf 91       	pop	r28
 57e:	08 95       	ret

00000580 <main>:

uint16_t redVal, greenVal, blueVal;


int main(void){
	i2c_init();
 580:	0e 94 79 00 	call	0xf2	; 0xf2 <i2c_init>
	usart_init(115200);
 584:	60 e0       	ldi	r22, 0x00	; 0
 586:	72 ec       	ldi	r23, 0xC2	; 194
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	0e 94 96 02 	call	0x52c	; 0x52c <usart_init>
	init_APDS9960();
 590:	0e 94 3f 01 	call	0x27e	; 0x27e <init_APDS9960>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 594:	8f e3       	ldi	r24, 0x3F	; 63
 596:	9c e9       	ldi	r25, 0x9C	; 156
 598:	01 97       	sbiw	r24, 0x01	; 1
 59a:	f1 f7       	brne	.-4      	; 0x598 <main+0x18>
 59c:	00 c0       	rjmp	.+0      	; 0x59e <main+0x1e>
 59e:	00 00       	nop

	//Start up Esp
	//Start AT communication
	_delay_ms(10);
	USART_putstring(AT);					//send AT to the USART
 5a0:	89 ea       	ldi	r24, 0xA9	; 169
 5a2:	91 e0       	ldi	r25, 0x01	; 1
 5a4:	0e 94 ab 02 	call	0x556	; 0x556 <USART_putstring>
 5a8:	8f e3       	ldi	r24, 0x3F	; 63
 5aa:	9c e9       	ldi	r25, 0x9C	; 156
 5ac:	01 97       	sbiw	r24, 0x01	; 1
 5ae:	f1 f7       	brne	.-4      	; 0x5ac <main+0x2c>
 5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <main+0x32>
 5b2:	00 00       	nop

	//connect to network
	_delay_ms(10);
	USART_putstring(RESET);		//reset ESP
 5b4:	80 e0       	ldi	r24, 0x00	; 0
 5b6:	91 e0       	ldi	r25, 0x01	; 1
 5b8:	0e 94 ab 02 	call	0x556	; 0x556 <USART_putstring>
 5bc:	8f e3       	ldi	r24, 0x3F	; 63
 5be:	9c e9       	ldi	r25, 0x9C	; 156
 5c0:	01 97       	sbiw	r24, 0x01	; 1
 5c2:	f1 f7       	brne	.-4      	; 0x5c0 <main+0x40>
 5c4:	00 c0       	rjmp	.+0      	; 0x5c6 <main+0x46>
 5c6:	00 00       	nop
	_delay_ms(10);
	USART_putstring(AT);			//confirm communication
 5c8:	89 ea       	ldi	r24, 0xA9	; 169
 5ca:	91 e0       	ldi	r25, 0x01	; 1
 5cc:	0e 94 ab 02 	call	0x556	; 0x556 <USART_putstring>
 5d0:	8f e3       	ldi	r24, 0x3F	; 63
 5d2:	9c e9       	ldi	r25, 0x9C	; 156
 5d4:	01 97       	sbiw	r24, 0x01	; 1
 5d6:	f1 f7       	brne	.-4      	; 0x5d4 <main+0x54>
 5d8:	00 c0       	rjmp	.+0      	; 0x5da <main+0x5a>
 5da:	00 00       	nop
	_delay_ms(10);
	USART_putstring(CWMODE);		//WiFi mode = 3
 5dc:	8b e9       	ldi	r24, 0x9B	; 155
 5de:	91 e0       	ldi	r25, 0x01	; 1
 5e0:	0e 94 ab 02 	call	0x556	; 0x556 <USART_putstring>
 5e4:	8f e3       	ldi	r24, 0x3F	; 63
 5e6:	9c e9       	ldi	r25, 0x9C	; 156
 5e8:	01 97       	sbiw	r24, 0x01	; 1
 5ea:	f1 f7       	brne	.-4      	; 0x5e8 <main+0x68>
 5ec:	00 c0       	rjmp	.+0      	; 0x5ee <main+0x6e>
 5ee:	00 00       	nop
	_delay_ms(10);
	USART_putstring(CWJAP);		//Send wifi login
 5f0:	8a e7       	ldi	r24, 0x7A	; 122
 5f2:	91 e0       	ldi	r25, 0x01	; 1
 5f4:	0e 94 ab 02 	call	0x556	; 0x556 <USART_putstring>
 5f8:	8f e3       	ldi	r24, 0x3F	; 63
 5fa:	9c e9       	ldi	r25, 0x9C	; 156
 5fc:	01 97       	sbiw	r24, 0x01	; 1
 5fe:	f1 f7       	brne	.-4      	; 0x5fc <main+0x7c>
 600:	00 c0       	rjmp	.+0      	; 0x602 <main+0x82>
 602:	00 00       	nop

	while(1){
		//getValues();

		_delay_ms(10);
		USART_putstring(CIPMUX);		//Single connection point
 604:	82 e3       	ldi	r24, 0x32	; 50
 606:	91 e0       	ldi	r25, 0x01	; 1
 608:	0e 94 ab 02 	call	0x556	; 0x556 <USART_putstring>
 60c:	8f e3       	ldi	r24, 0x3F	; 63
 60e:	9c e9       	ldi	r25, 0x9C	; 156
 610:	01 97       	sbiw	r24, 0x01	; 1
 612:	f1 f7       	brne	.-4      	; 0x610 <main+0x90>
 614:	00 c0       	rjmp	.+0      	; 0x616 <main+0x96>
 616:	00 00       	nop
		_delay_ms(10);
		USART_putstring(CIPSTART);	// Connect to ThingSpeak
 618:	81 e5       	ldi	r24, 0x51	; 81
 61a:	91 e0       	ldi	r25, 0x01	; 1
 61c:	0e 94 ab 02 	call	0x556	; 0x556 <USART_putstring>
 620:	8f e3       	ldi	r24, 0x3F	; 63
 622:	9c e9       	ldi	r25, 0x9C	; 156
 624:	01 97       	sbiw	r24, 0x01	; 1
 626:	f1 f7       	brne	.-4      	; 0x624 <main+0xa4>
 628:	00 c0       	rjmp	.+0      	; 0x62a <main+0xaa>
 62a:	00 00       	nop
		_delay_ms(10);
		USART_putstring(CIPSEND);	// Declare send length 50
 62c:	80 e4       	ldi	r24, 0x40	; 64
 62e:	91 e0       	ldi	r25, 0x01	; 1
 630:	0e 94 ab 02 	call	0x556	; 0x556 <USART_putstring>
 634:	8f e3       	ldi	r24, 0x3F	; 63
 636:	9c e9       	ldi	r25, 0x9C	; 156
 638:	01 97       	sbiw	r24, 0x01	; 1
 63a:	f1 f7       	brne	.-4      	; 0x638 <main+0xb8>
 63c:	00 c0       	rjmp	.+0      	; 0x63e <main+0xbe>
 63e:	00 00       	nop
		_delay_ms(10);
		getValues();
 640:	0e 94 c0 01 	call	0x380	; 0x380 <getValues>
		USART_putstring(SEND_DATA);	// Connect to proper key
 644:	89 e0       	ldi	r24, 0x09	; 9
 646:	91 e0       	ldi	r25, 0x01	; 1
 648:	0e 94 ab 02 	call	0x556	; 0x556 <USART_putstring>
		USART_putstring(RedStr);		// Send adc data
 64c:	8a ed       	ldi	r24, 0xDA	; 218
 64e:	91 e0       	ldi	r25, 0x01	; 1
 650:	0e 94 ab 02 	call	0x556	; 0x556 <USART_putstring>
		USART_putstring("&field2=");
 654:	8e ea       	ldi	r24, 0xAE	; 174
 656:	91 e0       	ldi	r25, 0x01	; 1
 658:	0e 94 ab 02 	call	0x556	; 0x556 <USART_putstring>
		USART_putstring(GreenStr);		// Send adc data
 65c:	80 ec       	ldi	r24, 0xC0	; 192
 65e:	91 e0       	ldi	r25, 0x01	; 1
 660:	0e 94 ab 02 	call	0x556	; 0x556 <USART_putstring>
		USART_putstring("&field3=");
 664:	87 eb       	ldi	r24, 0xB7	; 183
 666:	91 e0       	ldi	r25, 0x01	; 1
 668:	0e 94 ab 02 	call	0x556	; 0x556 <USART_putstring>
		USART_putstring(BlueStr);		// Send adc data
 66c:	8a ec       	ldi	r24, 0xCA	; 202
 66e:	91 e0       	ldi	r25, 0x01	; 1
 670:	0e 94 ab 02 	call	0x556	; 0x556 <USART_putstring>
 674:	9f ef       	ldi	r25, 0xFF	; 255
 676:	23 ed       	ldi	r18, 0xD3	; 211
 678:	80 e3       	ldi	r24, 0x30	; 48
 67a:	91 50       	subi	r25, 0x01	; 1
 67c:	20 40       	sbci	r18, 0x00	; 0
 67e:	80 40       	sbci	r24, 0x00	; 0
 680:	e1 f7       	brne	.-8      	; 0x67a <main+0xfa>
 682:	00 c0       	rjmp	.+0      	; 0x684 <main+0x104>
 684:	00 00       	nop
 686:	b8 cf       	rjmp	.-144    	; 0x5f8 <main+0x78>

00000688 <__itoa_ncheck>:
 688:	bb 27       	eor	r27, r27
 68a:	4a 30       	cpi	r20, 0x0A	; 10
 68c:	31 f4       	brne	.+12     	; 0x69a <__itoa_ncheck+0x12>
 68e:	99 23       	and	r25, r25
 690:	22 f4       	brpl	.+8      	; 0x69a <__itoa_ncheck+0x12>
 692:	bd e2       	ldi	r27, 0x2D	; 45
 694:	90 95       	com	r25
 696:	81 95       	neg	r24
 698:	9f 4f       	sbci	r25, 0xFF	; 255
 69a:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__utoa_common>

0000069e <__utoa_ncheck>:
 69e:	bb 27       	eor	r27, r27

000006a0 <__utoa_common>:
 6a0:	fb 01       	movw	r30, r22
 6a2:	55 27       	eor	r21, r21
 6a4:	aa 27       	eor	r26, r26
 6a6:	88 0f       	add	r24, r24
 6a8:	99 1f       	adc	r25, r25
 6aa:	aa 1f       	adc	r26, r26
 6ac:	a4 17       	cp	r26, r20
 6ae:	10 f0       	brcs	.+4      	; 0x6b4 <__utoa_common+0x14>
 6b0:	a4 1b       	sub	r26, r20
 6b2:	83 95       	inc	r24
 6b4:	50 51       	subi	r21, 0x10	; 16
 6b6:	b9 f7       	brne	.-18     	; 0x6a6 <__utoa_common+0x6>
 6b8:	a0 5d       	subi	r26, 0xD0	; 208
 6ba:	aa 33       	cpi	r26, 0x3A	; 58
 6bc:	08 f0       	brcs	.+2      	; 0x6c0 <__utoa_common+0x20>
 6be:	a9 5d       	subi	r26, 0xD9	; 217
 6c0:	a1 93       	st	Z+, r26
 6c2:	00 97       	sbiw	r24, 0x00	; 0
 6c4:	79 f7       	brne	.-34     	; 0x6a4 <__utoa_common+0x4>
 6c6:	b1 11       	cpse	r27, r1
 6c8:	b1 93       	st	Z+, r27
 6ca:	11 92       	st	Z+, r1
 6cc:	cb 01       	movw	r24, r22
 6ce:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <strrev>

000006d2 <strrev>:
 6d2:	dc 01       	movw	r26, r24
 6d4:	fc 01       	movw	r30, r24
 6d6:	67 2f       	mov	r22, r23
 6d8:	71 91       	ld	r23, Z+
 6da:	77 23       	and	r23, r23
 6dc:	e1 f7       	brne	.-8      	; 0x6d6 <strrev+0x4>
 6de:	32 97       	sbiw	r30, 0x02	; 2
 6e0:	04 c0       	rjmp	.+8      	; 0x6ea <strrev+0x18>
 6e2:	7c 91       	ld	r23, X
 6e4:	6d 93       	st	X+, r22
 6e6:	70 83       	st	Z, r23
 6e8:	62 91       	ld	r22, -Z
 6ea:	ae 17       	cp	r26, r30
 6ec:	bf 07       	cpc	r27, r31
 6ee:	c8 f3       	brcs	.-14     	; 0x6e2 <strrev+0x10>
 6f0:	08 95       	ret

000006f2 <_exit>:
 6f2:	f8 94       	cli

000006f4 <__stop_program>:
 6f4:	ff cf       	rjmp	.-2      	; 0x6f4 <__stop_program>
