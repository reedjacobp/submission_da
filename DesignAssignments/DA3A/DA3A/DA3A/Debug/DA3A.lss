
DA3A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000d82  00000e16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d82  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800110  00800110  00000e26  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e26  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000e98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e87  00000000  00000000  00000ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aed  00000000  00000000  00001d7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000461  00000000  00000000  0000286c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000017c  00000000  00000000  00002cd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000052e  00000000  00000000  00002e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005a8  00000000  00000000  0000337a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00003922  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 9b 00 	jmp	0x136	; 0x136 <__ctors_end>
   4:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
   8:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
   c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  10:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  14:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  18:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  1c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  20:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  24:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  28:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  2c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  30:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  34:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  38:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  3c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  40:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__vector_16>
  44:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  48:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  4c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  50:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  54:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  58:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  5c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  60:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  64:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  68:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  6c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  70:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  74:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  78:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  7c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  80:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  84:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  88:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  8c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  90:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  94:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  98:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  9c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  a0:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  a4:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  a8:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  ac:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  b0:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
  b4:	07 63       	ori	r16, 0x37	; 55
  b6:	42 36       	cpi	r20, 0x62	; 98
  b8:	b7 9b       	sbis	0x16, 7	; 22
  ba:	d8 a7       	std	Y+40, r29	; 0x28
  bc:	1a 39       	cpi	r17, 0x9A	; 154
  be:	68 56       	subi	r22, 0x68	; 104
  c0:	18 ae       	std	Y+56, r1	; 0x38
  c2:	ba ab       	std	Y+50, r27	; 0x32
  c4:	55 8c       	ldd	r5, Z+29	; 0x1d
  c6:	1d 3c       	cpi	r17, 0xCD	; 205
  c8:	b7 cc       	rjmp	.-1682   	; 0xfffffa38 <__eeprom_end+0xff7efa38>
  ca:	57 63       	ori	r21, 0x37	; 55
  cc:	bd 6d       	ori	r27, 0xDD	; 221
  ce:	ed fd       	.word	0xfded	; ????
  d0:	75 3e       	cpi	r23, 0xE5	; 229
  d2:	f6 17       	cp	r31, r22
  d4:	72 31       	cpi	r23, 0x12	; 18
  d6:	bf 00       	.word	0x00bf	; ????
  d8:	00 00       	nop
  da:	80 3f       	cpi	r24, 0xF0	; 240
  dc:	08 00       	.word	0x0008	; ????
  de:	00 00       	nop
  e0:	be 92       	st	-X, r11
  e2:	24 49       	sbci	r18, 0x94	; 148
  e4:	12 3e       	cpi	r17, 0xE2	; 226
  e6:	ab aa       	std	Y+51, r10	; 0x33
  e8:	aa 2a       	or	r10, r26
  ea:	be cd       	rjmp	.-1156   	; 0xfffffc68 <__eeprom_end+0xff7efc68>
  ec:	cc cc       	rjmp	.-1640   	; 0xfffffa86 <__eeprom_end+0xff7efa86>
  ee:	4c 3e       	cpi	r20, 0xEC	; 236
  f0:	00 00       	nop
  f2:	00 80       	ld	r0, Z
  f4:	be ab       	std	Y+54, r27	; 0x36
  f6:	aa aa       	std	Y+50, r10	; 0x32
  f8:	aa 3e       	cpi	r26, 0xEA	; 234
  fa:	00 00       	nop
  fc:	00 00       	nop
  fe:	bf 00       	.word	0x00bf	; ????
 100:	00 00       	nop
 102:	80 3f       	cpi	r24, 0xF0	; 240
 104:	00 00       	nop
 106:	00 00       	nop
 108:	00 08       	sbc	r0, r0
 10a:	41 78       	andi	r20, 0x81	; 129
 10c:	d3 bb       	out	0x13, r29	; 19
 10e:	43 87       	std	Z+11, r20	; 0x0b
 110:	d1 13       	cpse	r29, r17
 112:	3d 19       	sub	r19, r13
 114:	0e 3c       	cpi	r16, 0xCE	; 206
 116:	c3 bd       	out	0x23, r28	; 35
 118:	42 82       	std	Z+2, r4	; 0x02
 11a:	ad 2b       	or	r26, r29
 11c:	3e 68       	ori	r19, 0x8E	; 142
 11e:	ec 82       	std	Y+4, r14	; 0x04
 120:	76 be       	out	0x36, r7	; 54
 122:	d9 8f       	std	Y+25, r29	; 0x19
 124:	e1 a9       	ldd	r30, Z+49	; 0x31
 126:	3e 4c       	sbci	r19, 0xCE	; 206
 128:	80 ef       	ldi	r24, 0xF0	; 240
 12a:	ff be       	out	0x3f, r15	; 63
 12c:	01 c4       	rjmp	.+2050   	; 0x930 <__stack+0x31>
 12e:	ff 7f       	andi	r31, 0xFF	; 255
 130:	3f 00       	.word	0x003f	; ????
 132:	00 00       	nop
	...

00000136 <__ctors_end>:
 136:	11 24       	eor	r1, r1
 138:	1f be       	out	0x3f, r1	; 63
 13a:	cf ef       	ldi	r28, 0xFF	; 255
 13c:	d8 e0       	ldi	r29, 0x08	; 8
 13e:	de bf       	out	0x3e, r29	; 62
 140:	cd bf       	out	0x3d, r28	; 61

00000142 <__do_copy_data>:
 142:	11 e0       	ldi	r17, 0x01	; 1
 144:	a0 e0       	ldi	r26, 0x00	; 0
 146:	b1 e0       	ldi	r27, 0x01	; 1
 148:	e2 e8       	ldi	r30, 0x82	; 130
 14a:	fd e0       	ldi	r31, 0x0D	; 13
 14c:	02 c0       	rjmp	.+4      	; 0x152 <__do_copy_data+0x10>
 14e:	05 90       	lpm	r0, Z+
 150:	0d 92       	st	X+, r0
 152:	a0 31       	cpi	r26, 0x10	; 16
 154:	b1 07       	cpc	r27, r17
 156:	d9 f7       	brne	.-10     	; 0x14e <__do_copy_data+0xc>

00000158 <__do_clear_bss>:
 158:	21 e0       	ldi	r18, 0x01	; 1
 15a:	a0 e1       	ldi	r26, 0x10	; 16
 15c:	b1 e0       	ldi	r27, 0x01	; 1
 15e:	01 c0       	rjmp	.+2      	; 0x162 <.do_clear_bss_start>

00000160 <.do_clear_bss_loop>:
 160:	1d 92       	st	X+, r1

00000162 <.do_clear_bss_start>:
 162:	aa 31       	cpi	r26, 0x1A	; 26
 164:	b2 07       	cpc	r27, r18
 166:	e1 f7       	brne	.-8      	; 0x160 <.do_clear_bss_loop>
 168:	0e 94 c6 00 	call	0x18c	; 0x18c <main>
 16c:	0c 94 bf 06 	jmp	0xd7e	; 0xd7e <_exit>

00000170 <__bad_interrupt>:
 170:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000174 <USART_init>:

unsigned char USART_receive(void)
{
	while(!(UCSR0A & (1 << RXC0)));
	return UDR0;
}
 174:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 178:	87 e6       	ldi	r24, 0x67	; 103
 17a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 17e:	88 e1       	ldi	r24, 0x18	; 24
 180:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 184:	86 e0       	ldi	r24, 0x06	; 6
 186:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 18a:	08 95       	ret

0000018c <main>:
 18c:	0e 94 ba 00 	call	0x174	; 0x174 <USART_init>
 190:	14 bc       	out	0x24, r1	; 36
 192:	85 b5       	in	r24, 0x25	; 37
 194:	84 60       	ori	r24, 0x04	; 4
 196:	85 bd       	out	0x25, r24	; 37
 198:	80 e1       	ldi	r24, 0x10	; 16
 19a:	86 bd       	out	0x26, r24	; 38
 19c:	ee e6       	ldi	r30, 0x6E	; 110
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	81 60       	ori	r24, 0x01	; 1
 1a4:	80 83       	st	Z, r24
 1a6:	78 94       	sei
 1a8:	ff cf       	rjmp	.-2      	; 0x1a8 <main+0x1c>

000001aa <USART_send>:

void USART_send(unsigned char data)
{
	while(!(UCSR0A & (1 << UDRE0)));
 1aa:	e0 ec       	ldi	r30, 0xC0	; 192
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	90 81       	ld	r25, Z
 1b0:	95 ff       	sbrs	r25, 5
 1b2:	fd cf       	rjmp	.-6      	; 0x1ae <USART_send+0x4>
	UDR0 = data;
 1b4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1b8:	08 95       	ret

000001ba <USART_putstring>:
}

void USART_putstring(char* StringPtr)
{
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	ec 01       	movw	r28, r24
	while(*StringPtr != 0x00)
 1c0:	88 81       	ld	r24, Y
 1c2:	88 23       	and	r24, r24
 1c4:	31 f0       	breq	.+12     	; 0x1d2 <USART_putstring+0x18>
 1c6:	21 96       	adiw	r28, 0x01	; 1
	{
		USART_send(*StringPtr);
 1c8:	0e 94 d5 00 	call	0x1aa	; 0x1aa <USART_send>
	UDR0 = data;
}

void USART_putstring(char* StringPtr)
{
	while(*StringPtr != 0x00)
 1cc:	89 91       	ld	r24, Y+
 1ce:	81 11       	cpse	r24, r1
 1d0:	fb cf       	rjmp	.-10     	; 0x1c8 <USART_putstring+0xe>
	{
		USART_send(*StringPtr);
		StringPtr++;
	}
}
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	08 95       	ret

000001d8 <reverse>:
#include<math.h>

// reverses a string 'str' of length 'len'
void reverse(char *str, int len)
{
	int i=0, j=len-1, temp;
 1d8:	9b 01       	movw	r18, r22
 1da:	21 50       	subi	r18, 0x01	; 1
 1dc:	31 09       	sbc	r19, r1
	while (i<j)
 1de:	12 16       	cp	r1, r18
 1e0:	13 06       	cpc	r1, r19
 1e2:	84 f4       	brge	.+32     	; 0x204 <reverse+0x2c>
 1e4:	fc 01       	movw	r30, r24
 1e6:	e6 0f       	add	r30, r22
 1e8:	f7 1f       	adc	r31, r23
 1ea:	dc 01       	movw	r26, r24
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	90 e0       	ldi	r25, 0x00	; 0
	{
		temp = str[i];
 1f0:	4c 91       	ld	r20, X
		str[i] = str[j];
 1f2:	52 91       	ld	r21, -Z
 1f4:	5d 93       	st	X+, r21
		str[j] = temp;
 1f6:	40 83       	st	Z, r20
		i++; j--;
 1f8:	01 96       	adiw	r24, 0x01	; 1
 1fa:	21 50       	subi	r18, 0x01	; 1
 1fc:	31 09       	sbc	r19, r1

// reverses a string 'str' of length 'len'
void reverse(char *str, int len)
{
	int i=0, j=len-1, temp;
	while (i<j)
 1fe:	82 17       	cp	r24, r18
 200:	93 07       	cpc	r25, r19
 202:	b4 f3       	brlt	.-20     	; 0x1f0 <reverse+0x18>
 204:	08 95       	ret

00000206 <intToStr>:

// Converts a given integer x to string str[].  d is the number
// of digits required in output. If d is more than the number
// of digits in x, then 0s are added at the beginning.
int intToStr(int x, char str[], int d)
{
 206:	cf 92       	push	r12
 208:	df 92       	push	r13
 20a:	ef 92       	push	r14
 20c:	ff 92       	push	r15
 20e:	0f 93       	push	r16
 210:	1f 93       	push	r17
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	6b 01       	movw	r12, r22
 218:	8a 01       	movw	r16, r20
	int i = 0;
	while (x)
 21a:	00 97       	sbiw	r24, 0x00	; 0
 21c:	99 f0       	breq	.+38     	; 0x244 <intToStr+0x3e>
 21e:	eb 01       	movw	r28, r22
 220:	e0 e0       	ldi	r30, 0x00	; 0
 222:	f0 e0       	ldi	r31, 0x00	; 0
	{
		str[i++] = (x%10) + '0';
 224:	0f 2e       	mov	r0, r31
 226:	fa e0       	ldi	r31, 0x0A	; 10
 228:	ef 2e       	mov	r14, r31
 22a:	f1 2c       	mov	r15, r1
 22c:	f0 2d       	mov	r31, r0
 22e:	31 96       	adiw	r30, 0x01	; 1
 230:	b7 01       	movw	r22, r14
 232:	0e 94 a3 05 	call	0xb46	; 0xb46 <__divmodhi4>
 236:	80 5d       	subi	r24, 0xD0	; 208
 238:	89 93       	st	Y+, r24
		x = x/10;
 23a:	86 2f       	mov	r24, r22
 23c:	97 2f       	mov	r25, r23
// of digits required in output. If d is more than the number
// of digits in x, then 0s are added at the beginning.
int intToStr(int x, char str[], int d)
{
	int i = 0;
	while (x)
 23e:	00 97       	sbiw	r24, 0x00	; 0
 240:	b1 f7       	brne	.-20     	; 0x22e <intToStr+0x28>
 242:	02 c0       	rjmp	.+4      	; 0x248 <intToStr+0x42>
// Converts a given integer x to string str[].  d is the number
// of digits required in output. If d is more than the number
// of digits in x, then 0s are added at the beginning.
int intToStr(int x, char str[], int d)
{
	int i = 0;
 244:	e0 e0       	ldi	r30, 0x00	; 0
 246:	f0 e0       	ldi	r31, 0x00	; 0
		x = x/10;
	}
	
	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
 248:	e0 17       	cp	r30, r16
 24a:	f1 07       	cpc	r31, r17
 24c:	5c f4       	brge	.+22     	; 0x264 <intToStr+0x5e>
 24e:	ec 0d       	add	r30, r12
 250:	fd 1d       	adc	r31, r13
 252:	96 01       	movw	r18, r12
 254:	20 0f       	add	r18, r16
 256:	31 1f       	adc	r19, r17
	str[i++] = '0';
 258:	80 e3       	ldi	r24, 0x30	; 48
 25a:	81 93       	st	Z+, r24
		x = x/10;
	}
	
	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
 25c:	e2 17       	cp	r30, r18
 25e:	f3 07       	cpc	r31, r19
 260:	e1 f7       	brne	.-8      	; 0x25a <intToStr+0x54>
 262:	01 c0       	rjmp	.+2      	; 0x266 <intToStr+0x60>
 264:	8f 01       	movw	r16, r30
	str[i++] = '0';
	
	reverse(str, i);
 266:	b8 01       	movw	r22, r16
 268:	c6 01       	movw	r24, r12
 26a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <reverse>
	str[i] = '\0';
 26e:	e6 01       	movw	r28, r12
 270:	c0 0f       	add	r28, r16
 272:	d1 1f       	adc	r29, r17
 274:	18 82       	st	Y, r1
	return i;
}
 276:	c8 01       	movw	r24, r16
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	1f 91       	pop	r17
 27e:	0f 91       	pop	r16
 280:	ff 90       	pop	r15
 282:	ef 90       	pop	r14
 284:	df 90       	pop	r13
 286:	cf 90       	pop	r12
 288:	08 95       	ret

0000028a <ftoa>:

// Converts a floating point number to string.
void ftoa(float n, char *res, int afterpoint)
{
 28a:	2f 92       	push	r2
 28c:	3f 92       	push	r3
 28e:	4f 92       	push	r4
 290:	5f 92       	push	r5
 292:	6f 92       	push	r6
 294:	7f 92       	push	r7
 296:	8f 92       	push	r8
 298:	9f 92       	push	r9
 29a:	af 92       	push	r10
 29c:	bf 92       	push	r11
 29e:	cf 92       	push	r12
 2a0:	df 92       	push	r13
 2a2:	ef 92       	push	r14
 2a4:	ff 92       	push	r15
 2a6:	0f 93       	push	r16
 2a8:	1f 93       	push	r17
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	4b 01       	movw	r8, r22
 2b0:	5c 01       	movw	r10, r24
 2b2:	8a 01       	movw	r16, r20
 2b4:	e9 01       	movw	r28, r18
	// Extract integer part
	int ipart = (int)n;
 2b6:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__fixsfsi>
 2ba:	6b 01       	movw	r12, r22
 2bc:	7c 01       	movw	r14, r24
	
	// Extract floating part
	float fpart = n - (float)ipart;
	
	// convert integer part to string
	int i = intToStr(ipart, res, 0);
 2be:	40 e0       	ldi	r20, 0x00	; 0
 2c0:	50 e0       	ldi	r21, 0x00	; 0
 2c2:	b8 01       	movw	r22, r16
 2c4:	c6 01       	movw	r24, r12
 2c6:	0e 94 03 01 	call	0x206	; 0x206 <intToStr>
 2ca:	1c 01       	movw	r2, r24
	
	// check for display option after point
	if (afterpoint != 0)
 2cc:	20 97       	sbiw	r28, 0x00	; 0
 2ce:	99 f1       	breq	.+102    	; 0x336 <ftoa+0xac>
	{
		res[i] = '.';  // add dot
 2d0:	f8 01       	movw	r30, r16
 2d2:	e8 0f       	add	r30, r24
 2d4:	f9 1f       	adc	r31, r25
 2d6:	8e e2       	ldi	r24, 0x2E	; 46
 2d8:	80 83       	st	Z, r24
		
		// Get the value of fraction part upto given no.
		// of points after dot. The third parameter is needed
		// to handle cases like 233.007
		fpart = fpart * pow(10, afterpoint);
 2da:	be 01       	movw	r22, r28
 2dc:	0d 2e       	mov	r0, r29
 2de:	00 0c       	add	r0, r0
 2e0:	88 0b       	sbc	r24, r24
 2e2:	99 0b       	sbc	r25, r25
 2e4:	0e 94 b3 02 	call	0x566	; 0x566 <__floatsisf>
 2e8:	9b 01       	movw	r18, r22
 2ea:	ac 01       	movw	r20, r24
 2ec:	60 e0       	ldi	r22, 0x00	; 0
 2ee:	70 e0       	ldi	r23, 0x00	; 0
 2f0:	80 e2       	ldi	r24, 0x20	; 32
 2f2:	91 e4       	ldi	r25, 0x41	; 65
 2f4:	0e 94 ac 03 	call	0x758	; 0x758 <pow>
 2f8:	2b 01       	movw	r4, r22
 2fa:	3c 01       	movw	r6, r24
{
	// Extract integer part
	int ipart = (int)n;
	
	// Extract floating part
	float fpart = n - (float)ipart;
 2fc:	b6 01       	movw	r22, r12
 2fe:	dd 0c       	add	r13, r13
 300:	88 0b       	sbc	r24, r24
 302:	99 0b       	sbc	r25, r25
 304:	0e 94 b3 02 	call	0x566	; 0x566 <__floatsisf>
 308:	9b 01       	movw	r18, r22
 30a:	ac 01       	movw	r20, r24
 30c:	c5 01       	movw	r24, r10
 30e:	b4 01       	movw	r22, r8
 310:	0e 94 0e 02 	call	0x41c	; 0x41c <__subsf3>
		// Get the value of fraction part upto given no.
		// of points after dot. The third parameter is needed
		// to handle cases like 233.007
		fpart = fpart * pow(10, afterpoint);
		
		intToStr((int)fpart, res + i + 1, afterpoint);
 314:	2f ef       	ldi	r18, 0xFF	; 255
 316:	22 1a       	sub	r2, r18
 318:	32 0a       	sbc	r3, r18
 31a:	02 0d       	add	r16, r2
 31c:	13 1d       	adc	r17, r3
 31e:	a3 01       	movw	r20, r6
 320:	92 01       	movw	r18, r4
 322:	0e 94 3f 03 	call	0x67e	; 0x67e <__mulsf3>
 326:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__fixsfsi>
 32a:	dc 01       	movw	r26, r24
 32c:	cb 01       	movw	r24, r22
 32e:	ae 01       	movw	r20, r28
 330:	b8 01       	movw	r22, r16
 332:	0e 94 03 01 	call	0x206	; 0x206 <intToStr>
	}
}
 336:	df 91       	pop	r29
 338:	cf 91       	pop	r28
 33a:	1f 91       	pop	r17
 33c:	0f 91       	pop	r16
 33e:	ff 90       	pop	r15
 340:	ef 90       	pop	r14
 342:	df 90       	pop	r13
 344:	cf 90       	pop	r12
 346:	bf 90       	pop	r11
 348:	af 90       	pop	r10
 34a:	9f 90       	pop	r9
 34c:	8f 90       	pop	r8
 34e:	7f 90       	pop	r7
 350:	6f 90       	pop	r6
 352:	5f 90       	pop	r5
 354:	4f 90       	pop	r4
 356:	3f 90       	pop	r3
 358:	2f 90       	pop	r2
 35a:	08 95       	ret

0000035c <__vector_16>:

ISR (TIMER0_OVF_vect)
{
 35c:	1f 92       	push	r1
 35e:	0f 92       	push	r0
 360:	0f b6       	in	r0, 0x3f	; 63
 362:	0f 92       	push	r0
 364:	11 24       	eor	r1, r1
 366:	2f 93       	push	r18
 368:	3f 93       	push	r19
 36a:	4f 93       	push	r20
 36c:	5f 93       	push	r21
 36e:	6f 93       	push	r22
 370:	7f 93       	push	r23
 372:	8f 93       	push	r24
 374:	9f 93       	push	r25
 376:	af 93       	push	r26
 378:	bf 93       	push	r27
 37a:	ef 93       	push	r30
 37c:	ff 93       	push	r31
	OVF_COUNT++;
 37e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 382:	8f 5f       	subi	r24, 0xFF	; 255
 384:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	if (OVF_COUNT == OVF_LIMIT)
 388:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <OVF_LIMIT>
 38c:	89 13       	cpse	r24, r25
 38e:	33 c0       	rjmp	.+102    	; 0x3f6 <__vector_16+0x9a>
	{
		USART_putstring(String);
 390:	87 e0       	ldi	r24, 0x07	; 7
 392:	91 e0       	ldi	r25, 0x01	; 1
 394:	0e 94 dd 00 	call	0x1ba	; 0x1ba <USART_putstring>
		USART_putstring(newline);
 398:	85 e0       	ldi	r24, 0x05	; 5
 39a:	91 e0       	ldi	r25, 0x01	; 1
 39c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <USART_putstring>
		itoa(rand(), buffer, 10);
 3a0:	0e 94 17 06 	call	0xc2e	; 0xc2e <rand>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 3a4:	4a e0       	ldi	r20, 0x0A	; 10
 3a6:	61 e1       	ldi	r22, 0x11	; 17
 3a8:	71 e0       	ldi	r23, 0x01	; 1
 3aa:	0e 94 27 06 	call	0xc4e	; 0xc4e <__itoa_ncheck>
		USART_putstring(buffer);
 3ae:	81 e1       	ldi	r24, 0x11	; 17
 3b0:	91 e0       	ldi	r25, 0x01	; 1
 3b2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <USART_putstring>
		USART_putstring(newline);
 3b6:	85 e0       	ldi	r24, 0x05	; 5
 3b8:	91 e0       	ldi	r25, 0x01	; 1
 3ba:	0e 94 dd 00 	call	0x1ba	; 0x1ba <USART_putstring>
		ftoa(pi, pi_buffer, 2);
 3be:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <pi>
 3c2:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <pi+0x1>
 3c6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pi+0x2>
 3ca:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <pi+0x3>
 3ce:	22 e0       	ldi	r18, 0x02	; 2
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	46 e1       	ldi	r20, 0x16	; 22
 3d4:	51 e0       	ldi	r21, 0x01	; 1
 3d6:	0e 94 45 01 	call	0x28a	; 0x28a <ftoa>
		USART_putstring(pi_buffer);
 3da:	86 e1       	ldi	r24, 0x16	; 22
 3dc:	91 e0       	ldi	r25, 0x01	; 1
 3de:	0e 94 dd 00 	call	0x1ba	; 0x1ba <USART_putstring>
		USART_putstring(newline);
 3e2:	85 e0       	ldi	r24, 0x05	; 5
 3e4:	91 e0       	ldi	r25, 0x01	; 1
 3e6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <USART_putstring>
		USART_putstring(newline);
 3ea:	85 e0       	ldi	r24, 0x05	; 5
 3ec:	91 e0       	ldi	r25, 0x01	; 1
 3ee:	0e 94 dd 00 	call	0x1ba	; 0x1ba <USART_putstring>
		OVF_COUNT = 0;
 3f2:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
	}
	TCNT0 = 16;
 3f6:	80 e1       	ldi	r24, 0x10	; 16
 3f8:	86 bd       	out	0x26, r24	; 38
 3fa:	ff 91       	pop	r31
 3fc:	ef 91       	pop	r30
 3fe:	bf 91       	pop	r27
 400:	af 91       	pop	r26
 402:	9f 91       	pop	r25
 404:	8f 91       	pop	r24
 406:	7f 91       	pop	r23
 408:	6f 91       	pop	r22
 40a:	5f 91       	pop	r21
 40c:	4f 91       	pop	r20
 40e:	3f 91       	pop	r19
 410:	2f 91       	pop	r18
 412:	0f 90       	pop	r0
 414:	0f be       	out	0x3f, r0	; 63
 416:	0f 90       	pop	r0
 418:	1f 90       	pop	r1
 41a:	18 95       	reti

0000041c <__subsf3>:
 41c:	50 58       	subi	r21, 0x80	; 128

0000041e <__addsf3>:
 41e:	bb 27       	eor	r27, r27
 420:	aa 27       	eor	r26, r26
 422:	0e 94 26 02 	call	0x44c	; 0x44c <__addsf3x>
 426:	0c 94 05 03 	jmp	0x60a	; 0x60a <__fp_round>
 42a:	0e 94 f7 02 	call	0x5ee	; 0x5ee <__fp_pscA>
 42e:	38 f0       	brcs	.+14     	; 0x43e <__addsf3+0x20>
 430:	0e 94 fe 02 	call	0x5fc	; 0x5fc <__fp_pscB>
 434:	20 f0       	brcs	.+8      	; 0x43e <__addsf3+0x20>
 436:	39 f4       	brne	.+14     	; 0x446 <__addsf3+0x28>
 438:	9f 3f       	cpi	r25, 0xFF	; 255
 43a:	19 f4       	brne	.+6      	; 0x442 <__addsf3+0x24>
 43c:	26 f4       	brtc	.+8      	; 0x446 <__addsf3+0x28>
 43e:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__fp_nan>
 442:	0e f4       	brtc	.+2      	; 0x446 <__addsf3+0x28>
 444:	e0 95       	com	r30
 446:	e7 fb       	bst	r30, 7
 448:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <__fp_inf>

0000044c <__addsf3x>:
 44c:	e9 2f       	mov	r30, r25
 44e:	0e 94 16 03 	call	0x62c	; 0x62c <__fp_split3>
 452:	58 f3       	brcs	.-42     	; 0x42a <__addsf3+0xc>
 454:	ba 17       	cp	r27, r26
 456:	62 07       	cpc	r22, r18
 458:	73 07       	cpc	r23, r19
 45a:	84 07       	cpc	r24, r20
 45c:	95 07       	cpc	r25, r21
 45e:	20 f0       	brcs	.+8      	; 0x468 <__addsf3x+0x1c>
 460:	79 f4       	brne	.+30     	; 0x480 <__addsf3x+0x34>
 462:	a6 f5       	brtc	.+104    	; 0x4cc <__addsf3x+0x80>
 464:	0c 94 38 03 	jmp	0x670	; 0x670 <__fp_zero>
 468:	0e f4       	brtc	.+2      	; 0x46c <__addsf3x+0x20>
 46a:	e0 95       	com	r30
 46c:	0b 2e       	mov	r0, r27
 46e:	ba 2f       	mov	r27, r26
 470:	a0 2d       	mov	r26, r0
 472:	0b 01       	movw	r0, r22
 474:	b9 01       	movw	r22, r18
 476:	90 01       	movw	r18, r0
 478:	0c 01       	movw	r0, r24
 47a:	ca 01       	movw	r24, r20
 47c:	a0 01       	movw	r20, r0
 47e:	11 24       	eor	r1, r1
 480:	ff 27       	eor	r31, r31
 482:	59 1b       	sub	r21, r25
 484:	99 f0       	breq	.+38     	; 0x4ac <__addsf3x+0x60>
 486:	59 3f       	cpi	r21, 0xF9	; 249
 488:	50 f4       	brcc	.+20     	; 0x49e <__addsf3x+0x52>
 48a:	50 3e       	cpi	r21, 0xE0	; 224
 48c:	68 f1       	brcs	.+90     	; 0x4e8 <__addsf3x+0x9c>
 48e:	1a 16       	cp	r1, r26
 490:	f0 40       	sbci	r31, 0x00	; 0
 492:	a2 2f       	mov	r26, r18
 494:	23 2f       	mov	r18, r19
 496:	34 2f       	mov	r19, r20
 498:	44 27       	eor	r20, r20
 49a:	58 5f       	subi	r21, 0xF8	; 248
 49c:	f3 cf       	rjmp	.-26     	; 0x484 <__addsf3x+0x38>
 49e:	46 95       	lsr	r20
 4a0:	37 95       	ror	r19
 4a2:	27 95       	ror	r18
 4a4:	a7 95       	ror	r26
 4a6:	f0 40       	sbci	r31, 0x00	; 0
 4a8:	53 95       	inc	r21
 4aa:	c9 f7       	brne	.-14     	; 0x49e <__addsf3x+0x52>
 4ac:	7e f4       	brtc	.+30     	; 0x4cc <__addsf3x+0x80>
 4ae:	1f 16       	cp	r1, r31
 4b0:	ba 0b       	sbc	r27, r26
 4b2:	62 0b       	sbc	r22, r18
 4b4:	73 0b       	sbc	r23, r19
 4b6:	84 0b       	sbc	r24, r20
 4b8:	ba f0       	brmi	.+46     	; 0x4e8 <__addsf3x+0x9c>
 4ba:	91 50       	subi	r25, 0x01	; 1
 4bc:	a1 f0       	breq	.+40     	; 0x4e6 <__addsf3x+0x9a>
 4be:	ff 0f       	add	r31, r31
 4c0:	bb 1f       	adc	r27, r27
 4c2:	66 1f       	adc	r22, r22
 4c4:	77 1f       	adc	r23, r23
 4c6:	88 1f       	adc	r24, r24
 4c8:	c2 f7       	brpl	.-16     	; 0x4ba <__addsf3x+0x6e>
 4ca:	0e c0       	rjmp	.+28     	; 0x4e8 <__addsf3x+0x9c>
 4cc:	ba 0f       	add	r27, r26
 4ce:	62 1f       	adc	r22, r18
 4d0:	73 1f       	adc	r23, r19
 4d2:	84 1f       	adc	r24, r20
 4d4:	48 f4       	brcc	.+18     	; 0x4e8 <__addsf3x+0x9c>
 4d6:	87 95       	ror	r24
 4d8:	77 95       	ror	r23
 4da:	67 95       	ror	r22
 4dc:	b7 95       	ror	r27
 4de:	f7 95       	ror	r31
 4e0:	9e 3f       	cpi	r25, 0xFE	; 254
 4e2:	08 f0       	brcs	.+2      	; 0x4e6 <__addsf3x+0x9a>
 4e4:	b0 cf       	rjmp	.-160    	; 0x446 <__addsf3+0x28>
 4e6:	93 95       	inc	r25
 4e8:	88 0f       	add	r24, r24
 4ea:	08 f0       	brcs	.+2      	; 0x4ee <__addsf3x+0xa2>
 4ec:	99 27       	eor	r25, r25
 4ee:	ee 0f       	add	r30, r30
 4f0:	97 95       	ror	r25
 4f2:	87 95       	ror	r24
 4f4:	08 95       	ret

000004f6 <__fixsfsi>:
 4f6:	0e 94 82 02 	call	0x504	; 0x504 <__fixunssfsi>
 4fa:	68 94       	set
 4fc:	b1 11       	cpse	r27, r1
 4fe:	0c 94 39 03 	jmp	0x672	; 0x672 <__fp_szero>
 502:	08 95       	ret

00000504 <__fixunssfsi>:
 504:	0e 94 1e 03 	call	0x63c	; 0x63c <__fp_splitA>
 508:	88 f0       	brcs	.+34     	; 0x52c <__fixunssfsi+0x28>
 50a:	9f 57       	subi	r25, 0x7F	; 127
 50c:	98 f0       	brcs	.+38     	; 0x534 <__fixunssfsi+0x30>
 50e:	b9 2f       	mov	r27, r25
 510:	99 27       	eor	r25, r25
 512:	b7 51       	subi	r27, 0x17	; 23
 514:	b0 f0       	brcs	.+44     	; 0x542 <__fixunssfsi+0x3e>
 516:	e1 f0       	breq	.+56     	; 0x550 <__fixunssfsi+0x4c>
 518:	66 0f       	add	r22, r22
 51a:	77 1f       	adc	r23, r23
 51c:	88 1f       	adc	r24, r24
 51e:	99 1f       	adc	r25, r25
 520:	1a f0       	brmi	.+6      	; 0x528 <__fixunssfsi+0x24>
 522:	ba 95       	dec	r27
 524:	c9 f7       	brne	.-14     	; 0x518 <__fixunssfsi+0x14>
 526:	14 c0       	rjmp	.+40     	; 0x550 <__fixunssfsi+0x4c>
 528:	b1 30       	cpi	r27, 0x01	; 1
 52a:	91 f0       	breq	.+36     	; 0x550 <__fixunssfsi+0x4c>
 52c:	0e 94 38 03 	call	0x670	; 0x670 <__fp_zero>
 530:	b1 e0       	ldi	r27, 0x01	; 1
 532:	08 95       	ret
 534:	0c 94 38 03 	jmp	0x670	; 0x670 <__fp_zero>
 538:	67 2f       	mov	r22, r23
 53a:	78 2f       	mov	r23, r24
 53c:	88 27       	eor	r24, r24
 53e:	b8 5f       	subi	r27, 0xF8	; 248
 540:	39 f0       	breq	.+14     	; 0x550 <__fixunssfsi+0x4c>
 542:	b9 3f       	cpi	r27, 0xF9	; 249
 544:	cc f3       	brlt	.-14     	; 0x538 <__fixunssfsi+0x34>
 546:	86 95       	lsr	r24
 548:	77 95       	ror	r23
 54a:	67 95       	ror	r22
 54c:	b3 95       	inc	r27
 54e:	d9 f7       	brne	.-10     	; 0x546 <__fixunssfsi+0x42>
 550:	3e f4       	brtc	.+14     	; 0x560 <__fixunssfsi+0x5c>
 552:	90 95       	com	r25
 554:	80 95       	com	r24
 556:	70 95       	com	r23
 558:	61 95       	neg	r22
 55a:	7f 4f       	sbci	r23, 0xFF	; 255
 55c:	8f 4f       	sbci	r24, 0xFF	; 255
 55e:	9f 4f       	sbci	r25, 0xFF	; 255
 560:	08 95       	ret

00000562 <__floatunsisf>:
 562:	e8 94       	clt
 564:	09 c0       	rjmp	.+18     	; 0x578 <__floatsisf+0x12>

00000566 <__floatsisf>:
 566:	97 fb       	bst	r25, 7
 568:	3e f4       	brtc	.+14     	; 0x578 <__floatsisf+0x12>
 56a:	90 95       	com	r25
 56c:	80 95       	com	r24
 56e:	70 95       	com	r23
 570:	61 95       	neg	r22
 572:	7f 4f       	sbci	r23, 0xFF	; 255
 574:	8f 4f       	sbci	r24, 0xFF	; 255
 576:	9f 4f       	sbci	r25, 0xFF	; 255
 578:	99 23       	and	r25, r25
 57a:	a9 f0       	breq	.+42     	; 0x5a6 <__floatsisf+0x40>
 57c:	f9 2f       	mov	r31, r25
 57e:	96 e9       	ldi	r25, 0x96	; 150
 580:	bb 27       	eor	r27, r27
 582:	93 95       	inc	r25
 584:	f6 95       	lsr	r31
 586:	87 95       	ror	r24
 588:	77 95       	ror	r23
 58a:	67 95       	ror	r22
 58c:	b7 95       	ror	r27
 58e:	f1 11       	cpse	r31, r1
 590:	f8 cf       	rjmp	.-16     	; 0x582 <__floatsisf+0x1c>
 592:	fa f4       	brpl	.+62     	; 0x5d2 <__floatsisf+0x6c>
 594:	bb 0f       	add	r27, r27
 596:	11 f4       	brne	.+4      	; 0x59c <__floatsisf+0x36>
 598:	60 ff       	sbrs	r22, 0
 59a:	1b c0       	rjmp	.+54     	; 0x5d2 <__floatsisf+0x6c>
 59c:	6f 5f       	subi	r22, 0xFF	; 255
 59e:	7f 4f       	sbci	r23, 0xFF	; 255
 5a0:	8f 4f       	sbci	r24, 0xFF	; 255
 5a2:	9f 4f       	sbci	r25, 0xFF	; 255
 5a4:	16 c0       	rjmp	.+44     	; 0x5d2 <__floatsisf+0x6c>
 5a6:	88 23       	and	r24, r24
 5a8:	11 f0       	breq	.+4      	; 0x5ae <__floatsisf+0x48>
 5aa:	96 e9       	ldi	r25, 0x96	; 150
 5ac:	11 c0       	rjmp	.+34     	; 0x5d0 <__floatsisf+0x6a>
 5ae:	77 23       	and	r23, r23
 5b0:	21 f0       	breq	.+8      	; 0x5ba <__floatsisf+0x54>
 5b2:	9e e8       	ldi	r25, 0x8E	; 142
 5b4:	87 2f       	mov	r24, r23
 5b6:	76 2f       	mov	r23, r22
 5b8:	05 c0       	rjmp	.+10     	; 0x5c4 <__floatsisf+0x5e>
 5ba:	66 23       	and	r22, r22
 5bc:	71 f0       	breq	.+28     	; 0x5da <__floatsisf+0x74>
 5be:	96 e8       	ldi	r25, 0x86	; 134
 5c0:	86 2f       	mov	r24, r22
 5c2:	70 e0       	ldi	r23, 0x00	; 0
 5c4:	60 e0       	ldi	r22, 0x00	; 0
 5c6:	2a f0       	brmi	.+10     	; 0x5d2 <__floatsisf+0x6c>
 5c8:	9a 95       	dec	r25
 5ca:	66 0f       	add	r22, r22
 5cc:	77 1f       	adc	r23, r23
 5ce:	88 1f       	adc	r24, r24
 5d0:	da f7       	brpl	.-10     	; 0x5c8 <__floatsisf+0x62>
 5d2:	88 0f       	add	r24, r24
 5d4:	96 95       	lsr	r25
 5d6:	87 95       	ror	r24
 5d8:	97 f9       	bld	r25, 7
 5da:	08 95       	ret

000005dc <__fp_inf>:
 5dc:	97 f9       	bld	r25, 7
 5de:	9f 67       	ori	r25, 0x7F	; 127
 5e0:	80 e8       	ldi	r24, 0x80	; 128
 5e2:	70 e0       	ldi	r23, 0x00	; 0
 5e4:	60 e0       	ldi	r22, 0x00	; 0
 5e6:	08 95       	ret

000005e8 <__fp_nan>:
 5e8:	9f ef       	ldi	r25, 0xFF	; 255
 5ea:	80 ec       	ldi	r24, 0xC0	; 192
 5ec:	08 95       	ret

000005ee <__fp_pscA>:
 5ee:	00 24       	eor	r0, r0
 5f0:	0a 94       	dec	r0
 5f2:	16 16       	cp	r1, r22
 5f4:	17 06       	cpc	r1, r23
 5f6:	18 06       	cpc	r1, r24
 5f8:	09 06       	cpc	r0, r25
 5fa:	08 95       	ret

000005fc <__fp_pscB>:
 5fc:	00 24       	eor	r0, r0
 5fe:	0a 94       	dec	r0
 600:	12 16       	cp	r1, r18
 602:	13 06       	cpc	r1, r19
 604:	14 06       	cpc	r1, r20
 606:	05 06       	cpc	r0, r21
 608:	08 95       	ret

0000060a <__fp_round>:
 60a:	09 2e       	mov	r0, r25
 60c:	03 94       	inc	r0
 60e:	00 0c       	add	r0, r0
 610:	11 f4       	brne	.+4      	; 0x616 <__fp_round+0xc>
 612:	88 23       	and	r24, r24
 614:	52 f0       	brmi	.+20     	; 0x62a <__fp_round+0x20>
 616:	bb 0f       	add	r27, r27
 618:	40 f4       	brcc	.+16     	; 0x62a <__fp_round+0x20>
 61a:	bf 2b       	or	r27, r31
 61c:	11 f4       	brne	.+4      	; 0x622 <__fp_round+0x18>
 61e:	60 ff       	sbrs	r22, 0
 620:	04 c0       	rjmp	.+8      	; 0x62a <__fp_round+0x20>
 622:	6f 5f       	subi	r22, 0xFF	; 255
 624:	7f 4f       	sbci	r23, 0xFF	; 255
 626:	8f 4f       	sbci	r24, 0xFF	; 255
 628:	9f 4f       	sbci	r25, 0xFF	; 255
 62a:	08 95       	ret

0000062c <__fp_split3>:
 62c:	57 fd       	sbrc	r21, 7
 62e:	90 58       	subi	r25, 0x80	; 128
 630:	44 0f       	add	r20, r20
 632:	55 1f       	adc	r21, r21
 634:	59 f0       	breq	.+22     	; 0x64c <__fp_splitA+0x10>
 636:	5f 3f       	cpi	r21, 0xFF	; 255
 638:	71 f0       	breq	.+28     	; 0x656 <__fp_splitA+0x1a>
 63a:	47 95       	ror	r20

0000063c <__fp_splitA>:
 63c:	88 0f       	add	r24, r24
 63e:	97 fb       	bst	r25, 7
 640:	99 1f       	adc	r25, r25
 642:	61 f0       	breq	.+24     	; 0x65c <__fp_splitA+0x20>
 644:	9f 3f       	cpi	r25, 0xFF	; 255
 646:	79 f0       	breq	.+30     	; 0x666 <__fp_splitA+0x2a>
 648:	87 95       	ror	r24
 64a:	08 95       	ret
 64c:	12 16       	cp	r1, r18
 64e:	13 06       	cpc	r1, r19
 650:	14 06       	cpc	r1, r20
 652:	55 1f       	adc	r21, r21
 654:	f2 cf       	rjmp	.-28     	; 0x63a <__fp_split3+0xe>
 656:	46 95       	lsr	r20
 658:	f1 df       	rcall	.-30     	; 0x63c <__fp_splitA>
 65a:	08 c0       	rjmp	.+16     	; 0x66c <__fp_splitA+0x30>
 65c:	16 16       	cp	r1, r22
 65e:	17 06       	cpc	r1, r23
 660:	18 06       	cpc	r1, r24
 662:	99 1f       	adc	r25, r25
 664:	f1 cf       	rjmp	.-30     	; 0x648 <__fp_splitA+0xc>
 666:	86 95       	lsr	r24
 668:	71 05       	cpc	r23, r1
 66a:	61 05       	cpc	r22, r1
 66c:	08 94       	sec
 66e:	08 95       	ret

00000670 <__fp_zero>:
 670:	e8 94       	clt

00000672 <__fp_szero>:
 672:	bb 27       	eor	r27, r27
 674:	66 27       	eor	r22, r22
 676:	77 27       	eor	r23, r23
 678:	cb 01       	movw	r24, r22
 67a:	97 f9       	bld	r25, 7
 67c:	08 95       	ret

0000067e <__mulsf3>:
 67e:	0e 94 52 03 	call	0x6a4	; 0x6a4 <__mulsf3x>
 682:	0c 94 05 03 	jmp	0x60a	; 0x60a <__fp_round>
 686:	0e 94 f7 02 	call	0x5ee	; 0x5ee <__fp_pscA>
 68a:	38 f0       	brcs	.+14     	; 0x69a <__mulsf3+0x1c>
 68c:	0e 94 fe 02 	call	0x5fc	; 0x5fc <__fp_pscB>
 690:	20 f0       	brcs	.+8      	; 0x69a <__mulsf3+0x1c>
 692:	95 23       	and	r25, r21
 694:	11 f0       	breq	.+4      	; 0x69a <__mulsf3+0x1c>
 696:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <__fp_inf>
 69a:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__fp_nan>
 69e:	11 24       	eor	r1, r1
 6a0:	0c 94 39 03 	jmp	0x672	; 0x672 <__fp_szero>

000006a4 <__mulsf3x>:
 6a4:	0e 94 16 03 	call	0x62c	; 0x62c <__fp_split3>
 6a8:	70 f3       	brcs	.-36     	; 0x686 <__mulsf3+0x8>

000006aa <__mulsf3_pse>:
 6aa:	95 9f       	mul	r25, r21
 6ac:	c1 f3       	breq	.-16     	; 0x69e <__mulsf3+0x20>
 6ae:	95 0f       	add	r25, r21
 6b0:	50 e0       	ldi	r21, 0x00	; 0
 6b2:	55 1f       	adc	r21, r21
 6b4:	62 9f       	mul	r22, r18
 6b6:	f0 01       	movw	r30, r0
 6b8:	72 9f       	mul	r23, r18
 6ba:	bb 27       	eor	r27, r27
 6bc:	f0 0d       	add	r31, r0
 6be:	b1 1d       	adc	r27, r1
 6c0:	63 9f       	mul	r22, r19
 6c2:	aa 27       	eor	r26, r26
 6c4:	f0 0d       	add	r31, r0
 6c6:	b1 1d       	adc	r27, r1
 6c8:	aa 1f       	adc	r26, r26
 6ca:	64 9f       	mul	r22, r20
 6cc:	66 27       	eor	r22, r22
 6ce:	b0 0d       	add	r27, r0
 6d0:	a1 1d       	adc	r26, r1
 6d2:	66 1f       	adc	r22, r22
 6d4:	82 9f       	mul	r24, r18
 6d6:	22 27       	eor	r18, r18
 6d8:	b0 0d       	add	r27, r0
 6da:	a1 1d       	adc	r26, r1
 6dc:	62 1f       	adc	r22, r18
 6de:	73 9f       	mul	r23, r19
 6e0:	b0 0d       	add	r27, r0
 6e2:	a1 1d       	adc	r26, r1
 6e4:	62 1f       	adc	r22, r18
 6e6:	83 9f       	mul	r24, r19
 6e8:	a0 0d       	add	r26, r0
 6ea:	61 1d       	adc	r22, r1
 6ec:	22 1f       	adc	r18, r18
 6ee:	74 9f       	mul	r23, r20
 6f0:	33 27       	eor	r19, r19
 6f2:	a0 0d       	add	r26, r0
 6f4:	61 1d       	adc	r22, r1
 6f6:	23 1f       	adc	r18, r19
 6f8:	84 9f       	mul	r24, r20
 6fa:	60 0d       	add	r22, r0
 6fc:	21 1d       	adc	r18, r1
 6fe:	82 2f       	mov	r24, r18
 700:	76 2f       	mov	r23, r22
 702:	6a 2f       	mov	r22, r26
 704:	11 24       	eor	r1, r1
 706:	9f 57       	subi	r25, 0x7F	; 127
 708:	50 40       	sbci	r21, 0x00	; 0
 70a:	9a f0       	brmi	.+38     	; 0x732 <__mulsf3_pse+0x88>
 70c:	f1 f0       	breq	.+60     	; 0x74a <__mulsf3_pse+0xa0>
 70e:	88 23       	and	r24, r24
 710:	4a f0       	brmi	.+18     	; 0x724 <__mulsf3_pse+0x7a>
 712:	ee 0f       	add	r30, r30
 714:	ff 1f       	adc	r31, r31
 716:	bb 1f       	adc	r27, r27
 718:	66 1f       	adc	r22, r22
 71a:	77 1f       	adc	r23, r23
 71c:	88 1f       	adc	r24, r24
 71e:	91 50       	subi	r25, 0x01	; 1
 720:	50 40       	sbci	r21, 0x00	; 0
 722:	a9 f7       	brne	.-22     	; 0x70e <__mulsf3_pse+0x64>
 724:	9e 3f       	cpi	r25, 0xFE	; 254
 726:	51 05       	cpc	r21, r1
 728:	80 f0       	brcs	.+32     	; 0x74a <__mulsf3_pse+0xa0>
 72a:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <__fp_inf>
 72e:	0c 94 39 03 	jmp	0x672	; 0x672 <__fp_szero>
 732:	5f 3f       	cpi	r21, 0xFF	; 255
 734:	e4 f3       	brlt	.-8      	; 0x72e <__mulsf3_pse+0x84>
 736:	98 3e       	cpi	r25, 0xE8	; 232
 738:	d4 f3       	brlt	.-12     	; 0x72e <__mulsf3_pse+0x84>
 73a:	86 95       	lsr	r24
 73c:	77 95       	ror	r23
 73e:	67 95       	ror	r22
 740:	b7 95       	ror	r27
 742:	f7 95       	ror	r31
 744:	e7 95       	ror	r30
 746:	9f 5f       	subi	r25, 0xFF	; 255
 748:	c1 f7       	brne	.-16     	; 0x73a <__mulsf3_pse+0x90>
 74a:	fe 2b       	or	r31, r30
 74c:	88 0f       	add	r24, r24
 74e:	91 1d       	adc	r25, r1
 750:	96 95       	lsr	r25
 752:	87 95       	ror	r24
 754:	97 f9       	bld	r25, 7
 756:	08 95       	ret

00000758 <pow>:
 758:	fa 01       	movw	r30, r20
 75a:	ee 0f       	add	r30, r30
 75c:	ff 1f       	adc	r31, r31
 75e:	30 96       	adiw	r30, 0x00	; 0
 760:	21 05       	cpc	r18, r1
 762:	31 05       	cpc	r19, r1
 764:	a1 f1       	breq	.+104    	; 0x7ce <pow+0x76>
 766:	61 15       	cp	r22, r1
 768:	71 05       	cpc	r23, r1
 76a:	61 f4       	brne	.+24     	; 0x784 <pow+0x2c>
 76c:	80 38       	cpi	r24, 0x80	; 128
 76e:	bf e3       	ldi	r27, 0x3F	; 63
 770:	9b 07       	cpc	r25, r27
 772:	49 f1       	breq	.+82     	; 0x7c6 <pow+0x6e>
 774:	68 94       	set
 776:	90 38       	cpi	r25, 0x80	; 128
 778:	81 05       	cpc	r24, r1
 77a:	61 f0       	breq	.+24     	; 0x794 <pow+0x3c>
 77c:	80 38       	cpi	r24, 0x80	; 128
 77e:	bf ef       	ldi	r27, 0xFF	; 255
 780:	9b 07       	cpc	r25, r27
 782:	41 f0       	breq	.+16     	; 0x794 <pow+0x3c>
 784:	99 23       	and	r25, r25
 786:	4a f5       	brpl	.+82     	; 0x7da <pow+0x82>
 788:	ff 3f       	cpi	r31, 0xFF	; 255
 78a:	e1 05       	cpc	r30, r1
 78c:	31 05       	cpc	r19, r1
 78e:	21 05       	cpc	r18, r1
 790:	19 f1       	breq	.+70     	; 0x7d8 <pow+0x80>
 792:	e8 94       	clt
 794:	08 94       	sec
 796:	e7 95       	ror	r30
 798:	d9 01       	movw	r26, r18
 79a:	aa 23       	and	r26, r26
 79c:	29 f4       	brne	.+10     	; 0x7a8 <pow+0x50>
 79e:	ab 2f       	mov	r26, r27
 7a0:	be 2f       	mov	r27, r30
 7a2:	f8 5f       	subi	r31, 0xF8	; 248
 7a4:	d0 f3       	brcs	.-12     	; 0x79a <pow+0x42>
 7a6:	10 c0       	rjmp	.+32     	; 0x7c8 <pow+0x70>
 7a8:	ff 5f       	subi	r31, 0xFF	; 255
 7aa:	70 f4       	brcc	.+28     	; 0x7c8 <pow+0x70>
 7ac:	a6 95       	lsr	r26
 7ae:	e0 f7       	brcc	.-8      	; 0x7a8 <pow+0x50>
 7b0:	f7 39       	cpi	r31, 0x97	; 151
 7b2:	50 f0       	brcs	.+20     	; 0x7c8 <pow+0x70>
 7b4:	19 f0       	breq	.+6      	; 0x7bc <pow+0x64>
 7b6:	ff 3a       	cpi	r31, 0xAF	; 175
 7b8:	38 f4       	brcc	.+14     	; 0x7c8 <pow+0x70>
 7ba:	9f 77       	andi	r25, 0x7F	; 127
 7bc:	9f 93       	push	r25
 7be:	0d d0       	rcall	.+26     	; 0x7da <pow+0x82>
 7c0:	0f 90       	pop	r0
 7c2:	07 fc       	sbrc	r0, 7
 7c4:	90 58       	subi	r25, 0x80	; 128
 7c6:	08 95       	ret
 7c8:	46 f0       	brts	.+16     	; 0x7da <pow+0x82>
 7ca:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__fp_nan>
 7ce:	60 e0       	ldi	r22, 0x00	; 0
 7d0:	70 e0       	ldi	r23, 0x00	; 0
 7d2:	80 e8       	ldi	r24, 0x80	; 128
 7d4:	9f e3       	ldi	r25, 0x3F	; 63
 7d6:	08 95       	ret
 7d8:	4f e7       	ldi	r20, 0x7F	; 127
 7da:	9f 77       	andi	r25, 0x7F	; 127
 7dc:	5f 93       	push	r21
 7de:	4f 93       	push	r20
 7e0:	3f 93       	push	r19
 7e2:	2f 93       	push	r18
 7e4:	0e 94 a7 04 	call	0x94e	; 0x94e <log>
 7e8:	2f 91       	pop	r18
 7ea:	3f 91       	pop	r19
 7ec:	4f 91       	pop	r20
 7ee:	5f 91       	pop	r21
 7f0:	0e 94 3f 03 	call	0x67e	; 0x67e <__mulsf3>
 7f4:	0c 94 04 04 	jmp	0x808	; 0x808 <exp>
 7f8:	29 f4       	brne	.+10     	; 0x804 <pow+0xac>
 7fa:	16 f0       	brts	.+4      	; 0x800 <pow+0xa8>
 7fc:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <__fp_inf>
 800:	0c 94 38 03 	jmp	0x670	; 0x670 <__fp_zero>
 804:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__fp_nan>

00000808 <exp>:
 808:	0e 94 1e 03 	call	0x63c	; 0x63c <__fp_splitA>
 80c:	a8 f3       	brcs	.-22     	; 0x7f8 <pow+0xa0>
 80e:	96 38       	cpi	r25, 0x86	; 134
 810:	a0 f7       	brcc	.-24     	; 0x7fa <pow+0xa2>
 812:	07 f8       	bld	r0, 7
 814:	0f 92       	push	r0
 816:	e8 94       	clt
 818:	2b e3       	ldi	r18, 0x3B	; 59
 81a:	3a ea       	ldi	r19, 0xAA	; 170
 81c:	48 eb       	ldi	r20, 0xB8	; 184
 81e:	5f e7       	ldi	r21, 0x7F	; 127
 820:	0e 94 55 03 	call	0x6aa	; 0x6aa <__mulsf3_pse>
 824:	0f 92       	push	r0
 826:	0f 92       	push	r0
 828:	0f 92       	push	r0
 82a:	4d b7       	in	r20, 0x3d	; 61
 82c:	5e b7       	in	r21, 0x3e	; 62
 82e:	0f 92       	push	r0
 830:	0e 94 ef 04 	call	0x9de	; 0x9de <modf>
 834:	e4 eb       	ldi	r30, 0xB4	; 180
 836:	f0 e0       	ldi	r31, 0x00	; 0
 838:	0e 94 36 04 	call	0x86c	; 0x86c <__fp_powser>
 83c:	4f 91       	pop	r20
 83e:	5f 91       	pop	r21
 840:	ef 91       	pop	r30
 842:	ff 91       	pop	r31
 844:	e5 95       	asr	r30
 846:	ee 1f       	adc	r30, r30
 848:	ff 1f       	adc	r31, r31
 84a:	49 f0       	breq	.+18     	; 0x85e <exp+0x56>
 84c:	fe 57       	subi	r31, 0x7E	; 126
 84e:	e0 68       	ori	r30, 0x80	; 128
 850:	44 27       	eor	r20, r20
 852:	ee 0f       	add	r30, r30
 854:	44 1f       	adc	r20, r20
 856:	fa 95       	dec	r31
 858:	e1 f7       	brne	.-8      	; 0x852 <exp+0x4a>
 85a:	41 95       	neg	r20
 85c:	55 0b       	sbc	r21, r21
 85e:	0e 94 69 04 	call	0x8d2	; 0x8d2 <ldexp>
 862:	0f 90       	pop	r0
 864:	07 fe       	sbrs	r0, 7
 866:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <inverse>
 86a:	08 95       	ret

0000086c <__fp_powser>:
 86c:	df 93       	push	r29
 86e:	cf 93       	push	r28
 870:	1f 93       	push	r17
 872:	0f 93       	push	r16
 874:	ff 92       	push	r15
 876:	ef 92       	push	r14
 878:	df 92       	push	r13
 87a:	7b 01       	movw	r14, r22
 87c:	8c 01       	movw	r16, r24
 87e:	68 94       	set
 880:	06 c0       	rjmp	.+12     	; 0x88e <__fp_powser+0x22>
 882:	da 2e       	mov	r13, r26
 884:	ef 01       	movw	r28, r30
 886:	0e 94 52 03 	call	0x6a4	; 0x6a4 <__mulsf3x>
 88a:	fe 01       	movw	r30, r28
 88c:	e8 94       	clt
 88e:	a5 91       	lpm	r26, Z+
 890:	25 91       	lpm	r18, Z+
 892:	35 91       	lpm	r19, Z+
 894:	45 91       	lpm	r20, Z+
 896:	55 91       	lpm	r21, Z+
 898:	a6 f3       	brts	.-24     	; 0x882 <__fp_powser+0x16>
 89a:	ef 01       	movw	r28, r30
 89c:	0e 94 26 02 	call	0x44c	; 0x44c <__addsf3x>
 8a0:	fe 01       	movw	r30, r28
 8a2:	97 01       	movw	r18, r14
 8a4:	a8 01       	movw	r20, r16
 8a6:	da 94       	dec	r13
 8a8:	69 f7       	brne	.-38     	; 0x884 <__fp_powser+0x18>
 8aa:	df 90       	pop	r13
 8ac:	ef 90       	pop	r14
 8ae:	ff 90       	pop	r15
 8b0:	0f 91       	pop	r16
 8b2:	1f 91       	pop	r17
 8b4:	cf 91       	pop	r28
 8b6:	df 91       	pop	r29
 8b8:	08 95       	ret

000008ba <inverse>:
 8ba:	9b 01       	movw	r18, r22
 8bc:	ac 01       	movw	r20, r24
 8be:	60 e0       	ldi	r22, 0x00	; 0
 8c0:	70 e0       	ldi	r23, 0x00	; 0
 8c2:	80 e8       	ldi	r24, 0x80	; 128
 8c4:	9f e3       	ldi	r25, 0x3F	; 63
 8c6:	0c 94 23 05 	jmp	0xa46	; 0xa46 <__divsf3>
 8ca:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <__fp_inf>
 8ce:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <__fp_mpack>

000008d2 <ldexp>:
 8d2:	0e 94 1e 03 	call	0x63c	; 0x63c <__fp_splitA>
 8d6:	d8 f3       	brcs	.-10     	; 0x8ce <inverse+0x14>
 8d8:	99 23       	and	r25, r25
 8da:	c9 f3       	breq	.-14     	; 0x8ce <inverse+0x14>
 8dc:	94 0f       	add	r25, r20
 8de:	51 1d       	adc	r21, r1
 8e0:	a3 f3       	brvs	.-24     	; 0x8ca <inverse+0x10>
 8e2:	91 50       	subi	r25, 0x01	; 1
 8e4:	50 40       	sbci	r21, 0x00	; 0
 8e6:	94 f0       	brlt	.+36     	; 0x90c <__stack+0xd>
 8e8:	59 f0       	breq	.+22     	; 0x900 <__stack+0x1>
 8ea:	88 23       	and	r24, r24
 8ec:	32 f0       	brmi	.+12     	; 0x8fa <ldexp+0x28>
 8ee:	66 0f       	add	r22, r22
 8f0:	77 1f       	adc	r23, r23
 8f2:	88 1f       	adc	r24, r24
 8f4:	91 50       	subi	r25, 0x01	; 1
 8f6:	50 40       	sbci	r21, 0x00	; 0
 8f8:	c1 f7       	brne	.-16     	; 0x8ea <ldexp+0x18>
 8fa:	9e 3f       	cpi	r25, 0xFE	; 254
 8fc:	51 05       	cpc	r21, r1
 8fe:	2c f7       	brge	.-54     	; 0x8ca <inverse+0x10>
 900:	88 0f       	add	r24, r24
 902:	91 1d       	adc	r25, r1
 904:	96 95       	lsr	r25
 906:	87 95       	ror	r24
 908:	97 f9       	bld	r25, 7
 90a:	08 95       	ret
 90c:	5f 3f       	cpi	r21, 0xFF	; 255
 90e:	ac f0       	brlt	.+42     	; 0x93a <__stack+0x3b>
 910:	98 3e       	cpi	r25, 0xE8	; 232
 912:	9c f0       	brlt	.+38     	; 0x93a <__stack+0x3b>
 914:	bb 27       	eor	r27, r27
 916:	86 95       	lsr	r24
 918:	77 95       	ror	r23
 91a:	67 95       	ror	r22
 91c:	b7 95       	ror	r27
 91e:	08 f4       	brcc	.+2      	; 0x922 <__stack+0x23>
 920:	b1 60       	ori	r27, 0x01	; 1
 922:	93 95       	inc	r25
 924:	c1 f7       	brne	.-16     	; 0x916 <__stack+0x17>
 926:	bb 0f       	add	r27, r27
 928:	58 f7       	brcc	.-42     	; 0x900 <__stack+0x1>
 92a:	11 f4       	brne	.+4      	; 0x930 <__stack+0x31>
 92c:	60 ff       	sbrs	r22, 0
 92e:	e8 cf       	rjmp	.-48     	; 0x900 <__stack+0x1>
 930:	6f 5f       	subi	r22, 0xFF	; 255
 932:	7f 4f       	sbci	r23, 0xFF	; 255
 934:	8f 4f       	sbci	r24, 0xFF	; 255
 936:	9f 4f       	sbci	r25, 0xFF	; 255
 938:	e3 cf       	rjmp	.-58     	; 0x900 <__stack+0x1>
 93a:	0c 94 39 03 	jmp	0x672	; 0x672 <__fp_szero>
 93e:	16 f0       	brts	.+4      	; 0x944 <__stack+0x45>
 940:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <__fp_mpack>
 944:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__fp_nan>
 948:	68 94       	set
 94a:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <__fp_inf>

0000094e <log>:
 94e:	0e 94 1e 03 	call	0x63c	; 0x63c <__fp_splitA>
 952:	a8 f3       	brcs	.-22     	; 0x93e <__stack+0x3f>
 954:	99 23       	and	r25, r25
 956:	c1 f3       	breq	.-16     	; 0x948 <__stack+0x49>
 958:	ae f3       	brts	.-22     	; 0x944 <__stack+0x45>
 95a:	df 93       	push	r29
 95c:	cf 93       	push	r28
 95e:	1f 93       	push	r17
 960:	0f 93       	push	r16
 962:	ff 92       	push	r15
 964:	c9 2f       	mov	r28, r25
 966:	dd 27       	eor	r29, r29
 968:	88 23       	and	r24, r24
 96a:	2a f0       	brmi	.+10     	; 0x976 <log+0x28>
 96c:	21 97       	sbiw	r28, 0x01	; 1
 96e:	66 0f       	add	r22, r22
 970:	77 1f       	adc	r23, r23
 972:	88 1f       	adc	r24, r24
 974:	da f7       	brpl	.-10     	; 0x96c <log+0x1e>
 976:	20 e0       	ldi	r18, 0x00	; 0
 978:	30 e0       	ldi	r19, 0x00	; 0
 97a:	40 e8       	ldi	r20, 0x80	; 128
 97c:	5f eb       	ldi	r21, 0xBF	; 191
 97e:	9f e3       	ldi	r25, 0x3F	; 63
 980:	88 39       	cpi	r24, 0x98	; 152
 982:	20 f0       	brcs	.+8      	; 0x98c <log+0x3e>
 984:	80 3e       	cpi	r24, 0xE0	; 224
 986:	38 f0       	brcs	.+14     	; 0x996 <log+0x48>
 988:	21 96       	adiw	r28, 0x01	; 1
 98a:	8f 77       	andi	r24, 0x7F	; 127
 98c:	0e 94 0f 02 	call	0x41e	; 0x41e <__addsf3>
 990:	ec ed       	ldi	r30, 0xDC	; 220
 992:	f0 e0       	ldi	r31, 0x00	; 0
 994:	04 c0       	rjmp	.+8      	; 0x99e <log+0x50>
 996:	0e 94 0f 02 	call	0x41e	; 0x41e <__addsf3>
 99a:	e9 e0       	ldi	r30, 0x09	; 9
 99c:	f1 e0       	ldi	r31, 0x01	; 1
 99e:	0e 94 36 04 	call	0x86c	; 0x86c <__fp_powser>
 9a2:	8b 01       	movw	r16, r22
 9a4:	be 01       	movw	r22, r28
 9a6:	ec 01       	movw	r28, r24
 9a8:	fb 2e       	mov	r15, r27
 9aa:	6f 57       	subi	r22, 0x7F	; 127
 9ac:	71 09       	sbc	r23, r1
 9ae:	75 95       	asr	r23
 9b0:	77 1f       	adc	r23, r23
 9b2:	88 0b       	sbc	r24, r24
 9b4:	99 0b       	sbc	r25, r25
 9b6:	0e 94 b3 02 	call	0x566	; 0x566 <__floatsisf>
 9ba:	28 e1       	ldi	r18, 0x18	; 24
 9bc:	32 e7       	ldi	r19, 0x72	; 114
 9be:	41 e3       	ldi	r20, 0x31	; 49
 9c0:	5f e3       	ldi	r21, 0x3F	; 63
 9c2:	0e 94 52 03 	call	0x6a4	; 0x6a4 <__mulsf3x>
 9c6:	af 2d       	mov	r26, r15
 9c8:	98 01       	movw	r18, r16
 9ca:	ae 01       	movw	r20, r28
 9cc:	ff 90       	pop	r15
 9ce:	0f 91       	pop	r16
 9d0:	1f 91       	pop	r17
 9d2:	cf 91       	pop	r28
 9d4:	df 91       	pop	r29
 9d6:	0e 94 26 02 	call	0x44c	; 0x44c <__addsf3x>
 9da:	0c 94 05 03 	jmp	0x60a	; 0x60a <__fp_round>

000009de <modf>:
 9de:	fa 01       	movw	r30, r20
 9e0:	dc 01       	movw	r26, r24
 9e2:	aa 0f       	add	r26, r26
 9e4:	bb 1f       	adc	r27, r27
 9e6:	9b 01       	movw	r18, r22
 9e8:	ac 01       	movw	r20, r24
 9ea:	bf 57       	subi	r27, 0x7F	; 127
 9ec:	28 f4       	brcc	.+10     	; 0x9f8 <modf+0x1a>
 9ee:	22 27       	eor	r18, r18
 9f0:	33 27       	eor	r19, r19
 9f2:	44 27       	eor	r20, r20
 9f4:	50 78       	andi	r21, 0x80	; 128
 9f6:	20 c0       	rjmp	.+64     	; 0xa38 <modf+0x5a>
 9f8:	b7 51       	subi	r27, 0x17	; 23
 9fa:	90 f4       	brcc	.+36     	; 0xa20 <modf+0x42>
 9fc:	ab 2f       	mov	r26, r27
 9fe:	00 24       	eor	r0, r0
 a00:	46 95       	lsr	r20
 a02:	37 95       	ror	r19
 a04:	27 95       	ror	r18
 a06:	01 1c       	adc	r0, r1
 a08:	a3 95       	inc	r26
 a0a:	d2 f3       	brmi	.-12     	; 0xa00 <modf+0x22>
 a0c:	00 20       	and	r0, r0
 a0e:	71 f0       	breq	.+28     	; 0xa2c <modf+0x4e>
 a10:	22 0f       	add	r18, r18
 a12:	33 1f       	adc	r19, r19
 a14:	44 1f       	adc	r20, r20
 a16:	b3 95       	inc	r27
 a18:	da f3       	brmi	.-10     	; 0xa10 <modf+0x32>
 a1a:	0e d0       	rcall	.+28     	; 0xa38 <modf+0x5a>
 a1c:	0c 94 0e 02 	jmp	0x41c	; 0x41c <__subsf3>
 a20:	61 30       	cpi	r22, 0x01	; 1
 a22:	71 05       	cpc	r23, r1
 a24:	a0 e8       	ldi	r26, 0x80	; 128
 a26:	8a 07       	cpc	r24, r26
 a28:	b9 46       	sbci	r27, 0x69	; 105
 a2a:	30 f4       	brcc	.+12     	; 0xa38 <modf+0x5a>
 a2c:	9b 01       	movw	r18, r22
 a2e:	ac 01       	movw	r20, r24
 a30:	66 27       	eor	r22, r22
 a32:	77 27       	eor	r23, r23
 a34:	88 27       	eor	r24, r24
 a36:	90 78       	andi	r25, 0x80	; 128
 a38:	30 96       	adiw	r30, 0x00	; 0
 a3a:	21 f0       	breq	.+8      	; 0xa44 <modf+0x66>
 a3c:	20 83       	st	Z, r18
 a3e:	31 83       	std	Z+1, r19	; 0x01
 a40:	42 83       	std	Z+2, r20	; 0x02
 a42:	53 83       	std	Z+3, r21	; 0x03
 a44:	08 95       	ret

00000a46 <__divsf3>:
 a46:	0e 94 37 05 	call	0xa6e	; 0xa6e <__divsf3x>
 a4a:	0c 94 05 03 	jmp	0x60a	; 0x60a <__fp_round>
 a4e:	0e 94 fe 02 	call	0x5fc	; 0x5fc <__fp_pscB>
 a52:	58 f0       	brcs	.+22     	; 0xa6a <__divsf3+0x24>
 a54:	0e 94 f7 02 	call	0x5ee	; 0x5ee <__fp_pscA>
 a58:	40 f0       	brcs	.+16     	; 0xa6a <__divsf3+0x24>
 a5a:	29 f4       	brne	.+10     	; 0xa66 <__divsf3+0x20>
 a5c:	5f 3f       	cpi	r21, 0xFF	; 255
 a5e:	29 f0       	breq	.+10     	; 0xa6a <__divsf3+0x24>
 a60:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <__fp_inf>
 a64:	51 11       	cpse	r21, r1
 a66:	0c 94 39 03 	jmp	0x672	; 0x672 <__fp_szero>
 a6a:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__fp_nan>

00000a6e <__divsf3x>:
 a6e:	0e 94 16 03 	call	0x62c	; 0x62c <__fp_split3>
 a72:	68 f3       	brcs	.-38     	; 0xa4e <__divsf3+0x8>

00000a74 <__divsf3_pse>:
 a74:	99 23       	and	r25, r25
 a76:	b1 f3       	breq	.-20     	; 0xa64 <__divsf3+0x1e>
 a78:	55 23       	and	r21, r21
 a7a:	91 f3       	breq	.-28     	; 0xa60 <__divsf3+0x1a>
 a7c:	95 1b       	sub	r25, r21
 a7e:	55 0b       	sbc	r21, r21
 a80:	bb 27       	eor	r27, r27
 a82:	aa 27       	eor	r26, r26
 a84:	62 17       	cp	r22, r18
 a86:	73 07       	cpc	r23, r19
 a88:	84 07       	cpc	r24, r20
 a8a:	38 f0       	brcs	.+14     	; 0xa9a <__divsf3_pse+0x26>
 a8c:	9f 5f       	subi	r25, 0xFF	; 255
 a8e:	5f 4f       	sbci	r21, 0xFF	; 255
 a90:	22 0f       	add	r18, r18
 a92:	33 1f       	adc	r19, r19
 a94:	44 1f       	adc	r20, r20
 a96:	aa 1f       	adc	r26, r26
 a98:	a9 f3       	breq	.-22     	; 0xa84 <__divsf3_pse+0x10>
 a9a:	35 d0       	rcall	.+106    	; 0xb06 <__divsf3_pse+0x92>
 a9c:	0e 2e       	mov	r0, r30
 a9e:	3a f0       	brmi	.+14     	; 0xaae <__divsf3_pse+0x3a>
 aa0:	e0 e8       	ldi	r30, 0x80	; 128
 aa2:	32 d0       	rcall	.+100    	; 0xb08 <__divsf3_pse+0x94>
 aa4:	91 50       	subi	r25, 0x01	; 1
 aa6:	50 40       	sbci	r21, 0x00	; 0
 aa8:	e6 95       	lsr	r30
 aaa:	00 1c       	adc	r0, r0
 aac:	ca f7       	brpl	.-14     	; 0xaa0 <__divsf3_pse+0x2c>
 aae:	2b d0       	rcall	.+86     	; 0xb06 <__divsf3_pse+0x92>
 ab0:	fe 2f       	mov	r31, r30
 ab2:	29 d0       	rcall	.+82     	; 0xb06 <__divsf3_pse+0x92>
 ab4:	66 0f       	add	r22, r22
 ab6:	77 1f       	adc	r23, r23
 ab8:	88 1f       	adc	r24, r24
 aba:	bb 1f       	adc	r27, r27
 abc:	26 17       	cp	r18, r22
 abe:	37 07       	cpc	r19, r23
 ac0:	48 07       	cpc	r20, r24
 ac2:	ab 07       	cpc	r26, r27
 ac4:	b0 e8       	ldi	r27, 0x80	; 128
 ac6:	09 f0       	breq	.+2      	; 0xaca <__divsf3_pse+0x56>
 ac8:	bb 0b       	sbc	r27, r27
 aca:	80 2d       	mov	r24, r0
 acc:	bf 01       	movw	r22, r30
 ace:	ff 27       	eor	r31, r31
 ad0:	93 58       	subi	r25, 0x83	; 131
 ad2:	5f 4f       	sbci	r21, 0xFF	; 255
 ad4:	3a f0       	brmi	.+14     	; 0xae4 <__divsf3_pse+0x70>
 ad6:	9e 3f       	cpi	r25, 0xFE	; 254
 ad8:	51 05       	cpc	r21, r1
 ada:	78 f0       	brcs	.+30     	; 0xafa <__divsf3_pse+0x86>
 adc:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <__fp_inf>
 ae0:	0c 94 39 03 	jmp	0x672	; 0x672 <__fp_szero>
 ae4:	5f 3f       	cpi	r21, 0xFF	; 255
 ae6:	e4 f3       	brlt	.-8      	; 0xae0 <__divsf3_pse+0x6c>
 ae8:	98 3e       	cpi	r25, 0xE8	; 232
 aea:	d4 f3       	brlt	.-12     	; 0xae0 <__divsf3_pse+0x6c>
 aec:	86 95       	lsr	r24
 aee:	77 95       	ror	r23
 af0:	67 95       	ror	r22
 af2:	b7 95       	ror	r27
 af4:	f7 95       	ror	r31
 af6:	9f 5f       	subi	r25, 0xFF	; 255
 af8:	c9 f7       	brne	.-14     	; 0xaec <__divsf3_pse+0x78>
 afa:	88 0f       	add	r24, r24
 afc:	91 1d       	adc	r25, r1
 afe:	96 95       	lsr	r25
 b00:	87 95       	ror	r24
 b02:	97 f9       	bld	r25, 7
 b04:	08 95       	ret
 b06:	e1 e0       	ldi	r30, 0x01	; 1
 b08:	66 0f       	add	r22, r22
 b0a:	77 1f       	adc	r23, r23
 b0c:	88 1f       	adc	r24, r24
 b0e:	bb 1f       	adc	r27, r27
 b10:	62 17       	cp	r22, r18
 b12:	73 07       	cpc	r23, r19
 b14:	84 07       	cpc	r24, r20
 b16:	ba 07       	cpc	r27, r26
 b18:	20 f0       	brcs	.+8      	; 0xb22 <__divsf3_pse+0xae>
 b1a:	62 1b       	sub	r22, r18
 b1c:	73 0b       	sbc	r23, r19
 b1e:	84 0b       	sbc	r24, r20
 b20:	ba 0b       	sbc	r27, r26
 b22:	ee 1f       	adc	r30, r30
 b24:	88 f7       	brcc	.-30     	; 0xb08 <__divsf3_pse+0x94>
 b26:	e0 95       	com	r30
 b28:	08 95       	ret

00000b2a <__fp_mpack>:
 b2a:	9f 3f       	cpi	r25, 0xFF	; 255
 b2c:	31 f0       	breq	.+12     	; 0xb3a <__fp_mpack_finite+0xc>

00000b2e <__fp_mpack_finite>:
 b2e:	91 50       	subi	r25, 0x01	; 1
 b30:	20 f4       	brcc	.+8      	; 0xb3a <__fp_mpack_finite+0xc>
 b32:	87 95       	ror	r24
 b34:	77 95       	ror	r23
 b36:	67 95       	ror	r22
 b38:	b7 95       	ror	r27
 b3a:	88 0f       	add	r24, r24
 b3c:	91 1d       	adc	r25, r1
 b3e:	96 95       	lsr	r25
 b40:	87 95       	ror	r24
 b42:	97 f9       	bld	r25, 7
 b44:	08 95       	ret

00000b46 <__divmodhi4>:
 b46:	97 fb       	bst	r25, 7
 b48:	07 2e       	mov	r0, r23
 b4a:	16 f4       	brtc	.+4      	; 0xb50 <__divmodhi4+0xa>
 b4c:	00 94       	com	r0
 b4e:	07 d0       	rcall	.+14     	; 0xb5e <__divmodhi4_neg1>
 b50:	77 fd       	sbrc	r23, 7
 b52:	09 d0       	rcall	.+18     	; 0xb66 <__divmodhi4_neg2>
 b54:	0e 94 b7 05 	call	0xb6e	; 0xb6e <__udivmodhi4>
 b58:	07 fc       	sbrc	r0, 7
 b5a:	05 d0       	rcall	.+10     	; 0xb66 <__divmodhi4_neg2>
 b5c:	3e f4       	brtc	.+14     	; 0xb6c <__divmodhi4_exit>

00000b5e <__divmodhi4_neg1>:
 b5e:	90 95       	com	r25
 b60:	81 95       	neg	r24
 b62:	9f 4f       	sbci	r25, 0xFF	; 255
 b64:	08 95       	ret

00000b66 <__divmodhi4_neg2>:
 b66:	70 95       	com	r23
 b68:	61 95       	neg	r22
 b6a:	7f 4f       	sbci	r23, 0xFF	; 255

00000b6c <__divmodhi4_exit>:
 b6c:	08 95       	ret

00000b6e <__udivmodhi4>:
 b6e:	aa 1b       	sub	r26, r26
 b70:	bb 1b       	sub	r27, r27
 b72:	51 e1       	ldi	r21, 0x11	; 17
 b74:	07 c0       	rjmp	.+14     	; 0xb84 <__udivmodhi4_ep>

00000b76 <__udivmodhi4_loop>:
 b76:	aa 1f       	adc	r26, r26
 b78:	bb 1f       	adc	r27, r27
 b7a:	a6 17       	cp	r26, r22
 b7c:	b7 07       	cpc	r27, r23
 b7e:	10 f0       	brcs	.+4      	; 0xb84 <__udivmodhi4_ep>
 b80:	a6 1b       	sub	r26, r22
 b82:	b7 0b       	sbc	r27, r23

00000b84 <__udivmodhi4_ep>:
 b84:	88 1f       	adc	r24, r24
 b86:	99 1f       	adc	r25, r25
 b88:	5a 95       	dec	r21
 b8a:	a9 f7       	brne	.-22     	; 0xb76 <__udivmodhi4_loop>
 b8c:	80 95       	com	r24
 b8e:	90 95       	com	r25
 b90:	bc 01       	movw	r22, r24
 b92:	cd 01       	movw	r24, r26
 b94:	08 95       	ret

00000b96 <do_rand>:
 b96:	8f 92       	push	r8
 b98:	9f 92       	push	r9
 b9a:	af 92       	push	r10
 b9c:	bf 92       	push	r11
 b9e:	cf 92       	push	r12
 ba0:	df 92       	push	r13
 ba2:	ef 92       	push	r14
 ba4:	ff 92       	push	r15
 ba6:	cf 93       	push	r28
 ba8:	df 93       	push	r29
 baa:	ec 01       	movw	r28, r24
 bac:	68 81       	ld	r22, Y
 bae:	79 81       	ldd	r23, Y+1	; 0x01
 bb0:	8a 81       	ldd	r24, Y+2	; 0x02
 bb2:	9b 81       	ldd	r25, Y+3	; 0x03
 bb4:	61 15       	cp	r22, r1
 bb6:	71 05       	cpc	r23, r1
 bb8:	81 05       	cpc	r24, r1
 bba:	91 05       	cpc	r25, r1
 bbc:	21 f4       	brne	.+8      	; 0xbc6 <do_rand+0x30>
 bbe:	64 e2       	ldi	r22, 0x24	; 36
 bc0:	79 ed       	ldi	r23, 0xD9	; 217
 bc2:	8b e5       	ldi	r24, 0x5B	; 91
 bc4:	97 e0       	ldi	r25, 0x07	; 7
 bc6:	2d e1       	ldi	r18, 0x1D	; 29
 bc8:	33 ef       	ldi	r19, 0xF3	; 243
 bca:	41 e0       	ldi	r20, 0x01	; 1
 bcc:	50 e0       	ldi	r21, 0x00	; 0
 bce:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__divmodsi4>
 bd2:	49 01       	movw	r8, r18
 bd4:	5a 01       	movw	r10, r20
 bd6:	9b 01       	movw	r18, r22
 bd8:	ac 01       	movw	r20, r24
 bda:	a7 ea       	ldi	r26, 0xA7	; 167
 bdc:	b1 e4       	ldi	r27, 0x41	; 65
 bde:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <__muluhisi3>
 be2:	6b 01       	movw	r12, r22
 be4:	7c 01       	movw	r14, r24
 be6:	ac ee       	ldi	r26, 0xEC	; 236
 be8:	b4 ef       	ldi	r27, 0xF4	; 244
 bea:	a5 01       	movw	r20, r10
 bec:	94 01       	movw	r18, r8
 bee:	0e 94 89 06 	call	0xd12	; 0xd12 <__mulohisi3>
 bf2:	dc 01       	movw	r26, r24
 bf4:	cb 01       	movw	r24, r22
 bf6:	8c 0d       	add	r24, r12
 bf8:	9d 1d       	adc	r25, r13
 bfa:	ae 1d       	adc	r26, r14
 bfc:	bf 1d       	adc	r27, r15
 bfe:	b7 ff       	sbrs	r27, 7
 c00:	03 c0       	rjmp	.+6      	; 0xc08 <do_rand+0x72>
 c02:	01 97       	sbiw	r24, 0x01	; 1
 c04:	a1 09       	sbc	r26, r1
 c06:	b0 48       	sbci	r27, 0x80	; 128
 c08:	88 83       	st	Y, r24
 c0a:	99 83       	std	Y+1, r25	; 0x01
 c0c:	aa 83       	std	Y+2, r26	; 0x02
 c0e:	bb 83       	std	Y+3, r27	; 0x03
 c10:	9f 77       	andi	r25, 0x7F	; 127
 c12:	df 91       	pop	r29
 c14:	cf 91       	pop	r28
 c16:	ff 90       	pop	r15
 c18:	ef 90       	pop	r14
 c1a:	df 90       	pop	r13
 c1c:	cf 90       	pop	r12
 c1e:	bf 90       	pop	r11
 c20:	af 90       	pop	r10
 c22:	9f 90       	pop	r9
 c24:	8f 90       	pop	r8
 c26:	08 95       	ret

00000c28 <rand_r>:
 c28:	0e 94 cb 05 	call	0xb96	; 0xb96 <do_rand>
 c2c:	08 95       	ret

00000c2e <rand>:
 c2e:	80 e0       	ldi	r24, 0x00	; 0
 c30:	91 e0       	ldi	r25, 0x01	; 1
 c32:	0e 94 cb 05 	call	0xb96	; 0xb96 <do_rand>
 c36:	08 95       	ret

00000c38 <srand>:
 c38:	a0 e0       	ldi	r26, 0x00	; 0
 c3a:	b0 e0       	ldi	r27, 0x00	; 0
 c3c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 c40:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 c44:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 c48:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 c4c:	08 95       	ret

00000c4e <__itoa_ncheck>:
 c4e:	bb 27       	eor	r27, r27
 c50:	4a 30       	cpi	r20, 0x0A	; 10
 c52:	31 f4       	brne	.+12     	; 0xc60 <__itoa_ncheck+0x12>
 c54:	99 23       	and	r25, r25
 c56:	22 f4       	brpl	.+8      	; 0xc60 <__itoa_ncheck+0x12>
 c58:	bd e2       	ldi	r27, 0x2D	; 45
 c5a:	90 95       	com	r25
 c5c:	81 95       	neg	r24
 c5e:	9f 4f       	sbci	r25, 0xFF	; 255
 c60:	0c 94 33 06 	jmp	0xc66	; 0xc66 <__utoa_common>

00000c64 <__utoa_ncheck>:
 c64:	bb 27       	eor	r27, r27

00000c66 <__utoa_common>:
 c66:	fb 01       	movw	r30, r22
 c68:	55 27       	eor	r21, r21
 c6a:	aa 27       	eor	r26, r26
 c6c:	88 0f       	add	r24, r24
 c6e:	99 1f       	adc	r25, r25
 c70:	aa 1f       	adc	r26, r26
 c72:	a4 17       	cp	r26, r20
 c74:	10 f0       	brcs	.+4      	; 0xc7a <__utoa_common+0x14>
 c76:	a4 1b       	sub	r26, r20
 c78:	83 95       	inc	r24
 c7a:	50 51       	subi	r21, 0x10	; 16
 c7c:	b9 f7       	brne	.-18     	; 0xc6c <__utoa_common+0x6>
 c7e:	a0 5d       	subi	r26, 0xD0	; 208
 c80:	aa 33       	cpi	r26, 0x3A	; 58
 c82:	08 f0       	brcs	.+2      	; 0xc86 <__utoa_common+0x20>
 c84:	a9 5d       	subi	r26, 0xD9	; 217
 c86:	a1 93       	st	Z+, r26
 c88:	00 97       	sbiw	r24, 0x00	; 0
 c8a:	79 f7       	brne	.-34     	; 0xc6a <__utoa_common+0x4>
 c8c:	b1 11       	cpse	r27, r1
 c8e:	b1 93       	st	Z+, r27
 c90:	11 92       	st	Z+, r1
 c92:	cb 01       	movw	r24, r22
 c94:	0c 94 4c 06 	jmp	0xc98	; 0xc98 <strrev>

00000c98 <strrev>:
 c98:	dc 01       	movw	r26, r24
 c9a:	fc 01       	movw	r30, r24
 c9c:	67 2f       	mov	r22, r23
 c9e:	71 91       	ld	r23, Z+
 ca0:	77 23       	and	r23, r23
 ca2:	e1 f7       	brne	.-8      	; 0xc9c <strrev+0x4>
 ca4:	32 97       	sbiw	r30, 0x02	; 2
 ca6:	04 c0       	rjmp	.+8      	; 0xcb0 <strrev+0x18>
 ca8:	7c 91       	ld	r23, X
 caa:	6d 93       	st	X+, r22
 cac:	70 83       	st	Z, r23
 cae:	62 91       	ld	r22, -Z
 cb0:	ae 17       	cp	r26, r30
 cb2:	bf 07       	cpc	r27, r31
 cb4:	c8 f3       	brcs	.-14     	; 0xca8 <strrev+0x10>
 cb6:	08 95       	ret

00000cb8 <__divmodsi4>:
 cb8:	05 2e       	mov	r0, r21
 cba:	97 fb       	bst	r25, 7
 cbc:	1e f4       	brtc	.+6      	; 0xcc4 <__divmodsi4+0xc>
 cbe:	00 94       	com	r0
 cc0:	0e 94 73 06 	call	0xce6	; 0xce6 <__negsi2>
 cc4:	57 fd       	sbrc	r21, 7
 cc6:	07 d0       	rcall	.+14     	; 0xcd6 <__divmodsi4_neg2>
 cc8:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__udivmodsi4>
 ccc:	07 fc       	sbrc	r0, 7
 cce:	03 d0       	rcall	.+6      	; 0xcd6 <__divmodsi4_neg2>
 cd0:	4e f4       	brtc	.+18     	; 0xce4 <__divmodsi4_exit>
 cd2:	0c 94 73 06 	jmp	0xce6	; 0xce6 <__negsi2>

00000cd6 <__divmodsi4_neg2>:
 cd6:	50 95       	com	r21
 cd8:	40 95       	com	r20
 cda:	30 95       	com	r19
 cdc:	21 95       	neg	r18
 cde:	3f 4f       	sbci	r19, 0xFF	; 255
 ce0:	4f 4f       	sbci	r20, 0xFF	; 255
 ce2:	5f 4f       	sbci	r21, 0xFF	; 255

00000ce4 <__divmodsi4_exit>:
 ce4:	08 95       	ret

00000ce6 <__negsi2>:
 ce6:	90 95       	com	r25
 ce8:	80 95       	com	r24
 cea:	70 95       	com	r23
 cec:	61 95       	neg	r22
 cee:	7f 4f       	sbci	r23, 0xFF	; 255
 cf0:	8f 4f       	sbci	r24, 0xFF	; 255
 cf2:	9f 4f       	sbci	r25, 0xFF	; 255
 cf4:	08 95       	ret

00000cf6 <__muluhisi3>:
 cf6:	0e 94 b0 06 	call	0xd60	; 0xd60 <__umulhisi3>
 cfa:	a5 9f       	mul	r26, r21
 cfc:	90 0d       	add	r25, r0
 cfe:	b4 9f       	mul	r27, r20
 d00:	90 0d       	add	r25, r0
 d02:	a4 9f       	mul	r26, r20
 d04:	80 0d       	add	r24, r0
 d06:	91 1d       	adc	r25, r1
 d08:	11 24       	eor	r1, r1
 d0a:	08 95       	ret

00000d0c <__mulshisi3>:
 d0c:	b7 ff       	sbrs	r27, 7
 d0e:	0c 94 7b 06 	jmp	0xcf6	; 0xcf6 <__muluhisi3>

00000d12 <__mulohisi3>:
 d12:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <__muluhisi3>
 d16:	82 1b       	sub	r24, r18
 d18:	93 0b       	sbc	r25, r19
 d1a:	08 95       	ret

00000d1c <__udivmodsi4>:
 d1c:	a1 e2       	ldi	r26, 0x21	; 33
 d1e:	1a 2e       	mov	r1, r26
 d20:	aa 1b       	sub	r26, r26
 d22:	bb 1b       	sub	r27, r27
 d24:	fd 01       	movw	r30, r26
 d26:	0d c0       	rjmp	.+26     	; 0xd42 <__udivmodsi4_ep>

00000d28 <__udivmodsi4_loop>:
 d28:	aa 1f       	adc	r26, r26
 d2a:	bb 1f       	adc	r27, r27
 d2c:	ee 1f       	adc	r30, r30
 d2e:	ff 1f       	adc	r31, r31
 d30:	a2 17       	cp	r26, r18
 d32:	b3 07       	cpc	r27, r19
 d34:	e4 07       	cpc	r30, r20
 d36:	f5 07       	cpc	r31, r21
 d38:	20 f0       	brcs	.+8      	; 0xd42 <__udivmodsi4_ep>
 d3a:	a2 1b       	sub	r26, r18
 d3c:	b3 0b       	sbc	r27, r19
 d3e:	e4 0b       	sbc	r30, r20
 d40:	f5 0b       	sbc	r31, r21

00000d42 <__udivmodsi4_ep>:
 d42:	66 1f       	adc	r22, r22
 d44:	77 1f       	adc	r23, r23
 d46:	88 1f       	adc	r24, r24
 d48:	99 1f       	adc	r25, r25
 d4a:	1a 94       	dec	r1
 d4c:	69 f7       	brne	.-38     	; 0xd28 <__udivmodsi4_loop>
 d4e:	60 95       	com	r22
 d50:	70 95       	com	r23
 d52:	80 95       	com	r24
 d54:	90 95       	com	r25
 d56:	9b 01       	movw	r18, r22
 d58:	ac 01       	movw	r20, r24
 d5a:	bd 01       	movw	r22, r26
 d5c:	cf 01       	movw	r24, r30
 d5e:	08 95       	ret

00000d60 <__umulhisi3>:
 d60:	a2 9f       	mul	r26, r18
 d62:	b0 01       	movw	r22, r0
 d64:	b3 9f       	mul	r27, r19
 d66:	c0 01       	movw	r24, r0
 d68:	a3 9f       	mul	r26, r19
 d6a:	70 0d       	add	r23, r0
 d6c:	81 1d       	adc	r24, r1
 d6e:	11 24       	eor	r1, r1
 d70:	91 1d       	adc	r25, r1
 d72:	b2 9f       	mul	r27, r18
 d74:	70 0d       	add	r23, r0
 d76:	81 1d       	adc	r24, r1
 d78:	11 24       	eor	r1, r1
 d7a:	91 1d       	adc	r25, r1
 d7c:	08 95       	ret

00000d7e <_exit>:
 d7e:	f8 94       	cli

00000d80 <__stop_program>:
 d80:	ff cf       	rjmp	.-2      	; 0xd80 <__stop_program>
