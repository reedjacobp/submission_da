
DA4A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000222  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000222  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000222  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a74  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000964  00000000  00000000  00000d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000035c  00000000  00000000  00001694  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  000019f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b7  00000000  00000000  00001a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000100  00000000  00000000  00001eff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001fff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__vector_4>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a4 30       	cpi	r26, 0x04	; 4
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  d4:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <main>:
int control;	//  VARIABLE FOR ADC VALUE (NOT NEEDED)
int toggle = 0; // USED TO DETERMINE IF BUTTON SHOULD BE ON OR OFF

int main()
{
	DDRB |= (1 << DDRB1) | (1 << DDRB2); //make PB1 and PB2 as output
  dc:	84 b1       	in	r24, 0x04	; 4
  de:	86 60       	ori	r24, 0x06	; 6
  e0:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << DDRD6); //make PD6 as output for PWM
  e2:	56 9a       	sbi	0x0a, 6	; 10
	DDRC &= ~(1 << DDRC0); //PC0 is an input
  e4:	38 98       	cbi	0x07, 0	; 7
	DDRC &= ~(1 << DDRC1); //PC1 is an input
  e6:	39 98       	cbi	0x07, 1	; 7
	PORTC |= (1 << PORTC1);	// ENABLE PULL-UP RESISTOR
  e8:	41 9a       	sbi	0x08, 1	; 8
	TCCR0A=0x83; //set up for fast PWM and clear OC0A on compare match
  ea:	83 e8       	ldi	r24, 0x83	; 131
  ec:	84 bd       	out	0x24, r24	; 36
	TCCR0B=0x05; //prescalar of 1024
  ee:	85 e0       	ldi	r24, 0x05	; 5
  f0:	85 bd       	out	0x25, r24	; 37
	PCICR = 0x02; //enable PCIE1 for PCMSK1 to work
  f2:	82 e0       	ldi	r24, 0x02	; 2
  f4:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PCMSK1 = 0x02; //enable pin changes on PC1 (PCINT9)
  f8:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>

	sei(); //enable interrupts
  fc:	78 94       	sei
	ADMUX = (1<<REFS0); //reference voltage at AREF
  fe:	80 e4       	ldi	r24, 0x40	; 64
 100:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = (1<<ADEN)|(1<<ADSC)|(1<<ADATE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //set up for ADC conversion
 104:	87 ee       	ldi	r24, 0xE7	; 231
 106:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 10a:	ff cf       	rjmp	.-2      	; 0x10a <main+0x2e>

0000010c <__vector_4>:
	{
		//wait here
	}
}

ISR(PCINT1_vect){
 10c:	1f 92       	push	r1
 10e:	0f 92       	push	r0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	0f 92       	push	r0
 114:	11 24       	eor	r1, r1
 116:	2f 93       	push	r18
 118:	8f 93       	push	r24
 11a:	9f 93       	push	r25
 11c:	ef 93       	push	r30
 11e:	ff 93       	push	r31
	if(!(PINC & (1<<PINC1))){
 120:	31 99       	sbic	0x06, 1	; 6
 122:	39 c0       	rjmp	.+114    	; 0x196 <__vector_4+0x8a>
		if(toggle == 0){
 124:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 128:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 12c:	89 2b       	or	r24, r25
 12e:	59 f4       	brne	.+22     	; 0x146 <__vector_4+0x3a>
			OCR0A = 0;
 130:	17 bc       	out	0x27, r1	; 39
			PORTB &= ~(1<<PORTB2);
 132:	2a 98       	cbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 134:	2f ef       	ldi	r18, 0xFF	; 255
 136:	83 ed       	ldi	r24, 0xD3	; 211
 138:	90 e3       	ldi	r25, 0x30	; 48
 13a:	21 50       	subi	r18, 0x01	; 1
 13c:	80 40       	sbci	r24, 0x00	; 0
 13e:	90 40       	sbci	r25, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <__vector_4+0x2e>
 142:	00 c0       	rjmp	.+0      	; 0x144 <__vector_4+0x38>
 144:	00 00       	nop
			_delay_ms(1000);
		}
		if (toggle == 1){
 146:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 14a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	c1 f4       	brne	.+48     	; 0x182 <__vector_4+0x76>
			while((ADCSRA&(1<<ADIF))==0); // wait for conversion
 152:	ea e7       	ldi	r30, 0x7A	; 122
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	84 ff       	sbrs	r24, 4
 15a:	fd cf       	rjmp	.-6      	; 0x156 <__vector_4+0x4a>
			
			control = ADC;				  // ADC Conversion
 15c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 160:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 164:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <control+0x1>
 168:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <control>
			OCR0A = control;			  // Output to converted value to 0CR0A
 16c:	87 bd       	out	0x27, r24	; 39
			PORTB |= (1 << PORTB2);
 16e:	2a 9a       	sbi	0x05, 2	; 5
 170:	2f ef       	ldi	r18, 0xFF	; 255
 172:	83 ed       	ldi	r24, 0xD3	; 211
 174:	90 e3       	ldi	r25, 0x30	; 48
 176:	21 50       	subi	r18, 0x01	; 1
 178:	80 40       	sbci	r24, 0x00	; 0
 17a:	90 40       	sbci	r25, 0x00	; 0
 17c:	e1 f7       	brne	.-8      	; 0x176 <__vector_4+0x6a>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <__vector_4+0x74>
 180:	00 00       	nop
			_delay_ms(1000);
		}
		toggle ^= 1; //update state of motor to on
 182:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 186:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 18a:	21 e0       	ldi	r18, 0x01	; 1
 18c:	82 27       	eor	r24, r18
 18e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 192:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	}
}
 196:	ff 91       	pop	r31
 198:	ef 91       	pop	r30
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	2f 91       	pop	r18
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <_exit>:
 1aa:	f8 94       	cli

000001ac <__stop_program>:
 1ac:	ff cf       	rjmp	.-2      	; 0x1ac <__stop_program>
