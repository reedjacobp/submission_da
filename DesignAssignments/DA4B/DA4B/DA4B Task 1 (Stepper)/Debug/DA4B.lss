
DA4B.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000099d  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008e7  00000000  00000000  00000c29  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003a6  00000000  00000000  00001510  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000018b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000045b  00000000  00000000  000018ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001d47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 6d 00 	call	0xda	; 0xda <main>
  c4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <ADC_INIT>:
	}
}

void ADC_INIT(void)
{
	ADMUX = (0<<REFS1)|	//	Reference Selection Bits
  cc:	80 e4       	ldi	r24, 0x40	; 64
  ce:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	(0<<MUX3) |
	(0<<MUX2) |	//	ANalogChannel Selection	Bits
	(0<<MUX1) |	//	ADC0 (PC0)
	(0<<MUX0);

	ADCSRA = (1<<ADEN)|	//	ADC	Enable
  d2:	8f ee       	ldi	r24, 0xEF	; 239
  d4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  d8:	08 95       	ret

000000da <main>:

void ADC_INIT(void);

int main(void)
{
	DDRD = 0xF0;        // Set PD4 - PD7 as outputs for stepper motor
  da:	80 ef       	ldi	r24, 0xF0	; 240
  dc:	8a b9       	out	0x0a, r24	; 10
	ADC_INIT();	      	// Initialize ADC
  de:	0e 94 66 00 	call	0xcc	; 0xcc <ADC_INIT>
	TCCR1B = 0x0D;      // Set CTC mode and 1024 prescaler
  e2:	8d e0       	ldi	r24, 0x0D	; 13
  e4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	
	while(1)
	{
		while((ADCSRA&(1<<ADIF))==0); // wait for ADC conversion
  e8:	ea e7       	ldi	r30, 0x7A	; 122
  ea:	f0 e0       	ldi	r31, 0x00	; 0
		OCR1A = ADC;	// set OCR1A to the determined speed
  ec:	0f 2e       	mov	r0, r31
  ee:	f8 e7       	ldi	r31, 0x78	; 120
  f0:	ef 2e       	mov	r14, r31
  f2:	f1 2c       	mov	r15, r1
  f4:	f0 2d       	mov	r31, r0
  f6:	08 e8       	ldi	r16, 0x88	; 136
  f8:	10 e0       	ldi	r17, 0x00	; 0
		
		while((TIFR1 & (1 << OCF1A)) == 0);
		PORTD = 0x90;
  fa:	0f 2e       	mov	r0, r31
  fc:	f0 e9       	ldi	r31, 0x90	; 144
  fe:	df 2e       	mov	r13, r31
 100:	f0 2d       	mov	r31, r0
		TCNT1 = 0;
 102:	a4 e8       	ldi	r26, 0x84	; 132
 104:	b0 e0       	ldi	r27, 0x00	; 0
		TIFR1 |= (1<<OCF1A);
		while((TIFR1 & (1 << OCF1A)) == 0);
		PORTD = 0x80;
 106:	68 94       	set
 108:	cc 24       	eor	r12, r12
 10a:	c7 f8       	bld	r12, 7
		TCNT1 = 0;
		TIFR1 |= (1<<OCF1A);
		while((TIFR1 & (1 << OCF1A)) == 0);
		PORTD = 0xC0;
 10c:	70 ec       	ldi	r23, 0xC0	; 192
		TCNT1 = 0;
		TIFR1 |= (1<<OCF1A);
		while((TIFR1 & (1 << OCF1A)) == 0);
		PORTD = 0x40;
 10e:	60 e4       	ldi	r22, 0x40	; 64
		TCNT1 = 0;
		TIFR1 |= (1<<OCF1A);
		while((TIFR1 & (1 << OCF1A)) == 0);
		PORTD = 0x60;
 110:	50 e6       	ldi	r21, 0x60	; 96
		TCNT1 = 0;
		TIFR1 |= (1<<OCF1A);
		while((TIFR1 & (1 << OCF1A)) == 0);
		PORTD = 0x20;
 112:	40 e2       	ldi	r20, 0x20	; 32
		TCNT1 = 0;
		TIFR1 |= (1<<OCF1A);
		while((TIFR1 & (1 << OCF1A)) == 0);
		PORTD = 0x30;
 114:	30 e3       	ldi	r19, 0x30	; 48
		TCNT1 = 0;
		TIFR1 |= (1<<OCF1A);
		while((TIFR1 & (1 << OCF1A)) == 0);
		PORTD = 0x10;
 116:	20 e1       	ldi	r18, 0x10	; 16
	ADC_INIT();	      	// Initialize ADC
	TCCR1B = 0x0D;      // Set CTC mode and 1024 prescaler
	
	while(1)
	{
		while((ADCSRA&(1<<ADIF))==0); // wait for ADC conversion
 118:	80 81       	ld	r24, Z
 11a:	84 ff       	sbrs	r24, 4
 11c:	fd cf       	rjmp	.-6      	; 0x118 <main+0x3e>
		OCR1A = ADC;	// set OCR1A to the determined speed
 11e:	e7 01       	movw	r28, r14
 120:	88 81       	ld	r24, Y
 122:	99 81       	ldd	r25, Y+1	; 0x01
 124:	e8 01       	movw	r28, r16
 126:	99 83       	std	Y+1, r25	; 0x01
 128:	88 83       	st	Y, r24
		
		while((TIFR1 & (1 << OCF1A)) == 0);
 12a:	b1 9b       	sbis	0x16, 1	; 22
 12c:	fe cf       	rjmp	.-4      	; 0x12a <main+0x50>
		PORTD = 0x90;
 12e:	db b8       	out	0x0b, r13	; 11
		TCNT1 = 0;
 130:	11 96       	adiw	r26, 0x01	; 1
 132:	1c 92       	st	X, r1
 134:	1e 92       	st	-X, r1
		TIFR1 |= (1<<OCF1A);
 136:	b1 9a       	sbi	0x16, 1	; 22
		while((TIFR1 & (1 << OCF1A)) == 0);
 138:	b1 9b       	sbis	0x16, 1	; 22
 13a:	fe cf       	rjmp	.-4      	; 0x138 <main+0x5e>
		PORTD = 0x80;
 13c:	cb b8       	out	0x0b, r12	; 11
		TCNT1 = 0;
 13e:	11 96       	adiw	r26, 0x01	; 1
 140:	1c 92       	st	X, r1
 142:	1e 92       	st	-X, r1
		TIFR1 |= (1<<OCF1A);
 144:	b1 9a       	sbi	0x16, 1	; 22
		while((TIFR1 & (1 << OCF1A)) == 0);
 146:	b1 9b       	sbis	0x16, 1	; 22
 148:	fe cf       	rjmp	.-4      	; 0x146 <main+0x6c>
		PORTD = 0xC0;
 14a:	7b b9       	out	0x0b, r23	; 11
		TCNT1 = 0;
 14c:	11 96       	adiw	r26, 0x01	; 1
 14e:	1c 92       	st	X, r1
 150:	1e 92       	st	-X, r1
		TIFR1 |= (1<<OCF1A);
 152:	b1 9a       	sbi	0x16, 1	; 22
		while((TIFR1 & (1 << OCF1A)) == 0);
 154:	b1 9b       	sbis	0x16, 1	; 22
 156:	fe cf       	rjmp	.-4      	; 0x154 <main+0x7a>
		PORTD = 0x40;
 158:	6b b9       	out	0x0b, r22	; 11
		TCNT1 = 0;
 15a:	11 96       	adiw	r26, 0x01	; 1
 15c:	1c 92       	st	X, r1
 15e:	1e 92       	st	-X, r1
		TIFR1 |= (1<<OCF1A);
 160:	b1 9a       	sbi	0x16, 1	; 22
		while((TIFR1 & (1 << OCF1A)) == 0);
 162:	b1 9b       	sbis	0x16, 1	; 22
 164:	fe cf       	rjmp	.-4      	; 0x162 <main+0x88>
		PORTD = 0x60;
 166:	5b b9       	out	0x0b, r21	; 11
		TCNT1 = 0;
 168:	11 96       	adiw	r26, 0x01	; 1
 16a:	1c 92       	st	X, r1
 16c:	1e 92       	st	-X, r1
		TIFR1 |= (1<<OCF1A);
 16e:	b1 9a       	sbi	0x16, 1	; 22
		while((TIFR1 & (1 << OCF1A)) == 0);
 170:	b1 9b       	sbis	0x16, 1	; 22
 172:	fe cf       	rjmp	.-4      	; 0x170 <main+0x96>
		PORTD = 0x20;
 174:	4b b9       	out	0x0b, r20	; 11
		TCNT1 = 0;
 176:	11 96       	adiw	r26, 0x01	; 1
 178:	1c 92       	st	X, r1
 17a:	1e 92       	st	-X, r1
		TIFR1 |= (1<<OCF1A);
 17c:	b1 9a       	sbi	0x16, 1	; 22
		while((TIFR1 & (1 << OCF1A)) == 0);
 17e:	b1 9b       	sbis	0x16, 1	; 22
 180:	fe cf       	rjmp	.-4      	; 0x17e <main+0xa4>
		PORTD = 0x30;
 182:	3b b9       	out	0x0b, r19	; 11
		TCNT1 = 0;
 184:	11 96       	adiw	r26, 0x01	; 1
 186:	1c 92       	st	X, r1
 188:	1e 92       	st	-X, r1
		TIFR1 |= (1<<OCF1A);
 18a:	b1 9a       	sbi	0x16, 1	; 22
		while((TIFR1 & (1 << OCF1A)) == 0);
 18c:	b1 9b       	sbis	0x16, 1	; 22
 18e:	fe cf       	rjmp	.-4      	; 0x18c <main+0xb2>
		PORTD = 0x10;
 190:	2b b9       	out	0x0b, r18	; 11
		TCNT1 = 0;
 192:	11 96       	adiw	r26, 0x01	; 1
 194:	1c 92       	st	X, r1
 196:	1e 92       	st	-X, r1
		TIFR1 |= (1<<OCF1A);
 198:	b1 9a       	sbi	0x16, 1	; 22
	}
 19a:	be cf       	rjmp	.-132    	; 0x118 <main+0x3e>

0000019c <_exit>:
 19c:	f8 94       	cli

0000019e <__stop_program>:
 19e:	ff cf       	rjmp	.-2      	; 0x19e <__stop_program>
