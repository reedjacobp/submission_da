
DA2C_Task2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000017c  00000210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800102  00800102  00000212  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009ac  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ed  00000000  00000000  00000c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d4  00000000  00000000  00001545  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  0000181c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000475  00000000  00000000  00001864  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  00001cd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001d22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_16>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ec e7       	ldi	r30, 0x7C	; 124
  c8:	f1 e0       	ldi	r31, 0x01	; 1
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a2 30       	cpi	r26, 0x02	; 2
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a2 e0       	ldi	r26, 0x02	; 2
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a3 30       	cpi	r26, 0x03	; 3
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  ea:	0c 94 bc 00 	jmp	0x178	; 0x178 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <main>:
uint8_t OVF_LIMIT = 16;

int main(void)
{
	//int count = 0;
	DDRB = 0xFF; //all registers in DDRB are outputs
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x00; //all registers in DDRC are inputs
  f6:	17 b8       	out	0x07, r1	; 7
	PORTB = 0xFF; //turn on all LEDs
  f8:	85 b9       	out	0x05, r24	; 5
	TCCR0A = 0x00; //normal operation
  fa:	14 bc       	out	0x24, r1	; 36
	TCCR0B |= (1 << CS02) | (1 << CS00); //set prescalar to 1024
  fc:	85 b5       	in	r24, 0x25	; 37
  fe:	85 60       	ori	r24, 0x05	; 5
 100:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 12;
 102:	8c e0       	ldi	r24, 0x0C	; 12
 104:	86 bd       	out	0x26, r24	; 38
	TIMSK0 |= (1 << TOIE0);
 106:	ee e6       	ldi	r30, 0x6E	; 110
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	81 60       	ori	r24, 0x01	; 1
 10e:	80 83       	st	Z, r24
	sei();
 110:	78 94       	sei
 112:	ff cf       	rjmp	.-2      	; 0x112 <main+0x20>

00000114 <__vector_16>:
		
    }
}

ISR (TIMER0_OVF_vect)
{
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	8f 93       	push	r24
 120:	9f 93       	push	r25
	OVF_COUNT++;
 122:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 126:	8f 5f       	subi	r24, 0xFF	; 255
 128:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	if (OVF_COUNT == OVF_LIMIT)
 12c:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <OVF_LIMIT>
 130:	89 13       	cpse	r24, r25
 132:	19 c0       	rjmp	.+50     	; 0x166 <__vector_16+0x52>
	{
		PORTB ^= (1 << 3);
 134:	95 b1       	in	r25, 0x05	; 5
 136:	88 e0       	ldi	r24, 0x08	; 8
 138:	89 27       	eor	r24, r25
 13a:	85 b9       	out	0x05, r24	; 5
		PORTB |= (1 << 2);
 13c:	2a 9a       	sbi	0x05, 2	; 5
		if(OVF_LIMIT == 16)
 13e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <OVF_LIMIT>
 142:	80 31       	cpi	r24, 0x10	; 16
 144:	19 f4       	brne	.+6      	; 0x14c <__vector_16+0x38>
		{
			OVF_LIMIT = 24;
 146:	88 e1       	ldi	r24, 0x18	; 24
 148:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <OVF_LIMIT>
		}
		if(!(PINC & (1 << 3)))
 14c:	33 99       	sbic	0x06, 3	; 6
 14e:	06 c0       	rjmp	.+12     	; 0x15c <__vector_16+0x48>
		{
			OVF_LIMIT = 85;
 150:	85 e5       	ldi	r24, 0x55	; 85
 152:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <OVF_LIMIT>
			PORTB |= (1 << 3);
 156:	2b 9a       	sbi	0x05, 3	; 5
			PORTB &= ~(1 << 2);
 158:	2a 98       	cbi	0x05, 2	; 5
 15a:	03 c0       	rjmp	.+6      	; 0x162 <__vector_16+0x4e>
		}
		else
		{
			OVF_LIMIT = 16;
 15c:	80 e1       	ldi	r24, 0x10	; 16
 15e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <OVF_LIMIT>
		}
		OVF_COUNT = 0;
 162:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
	}
	TCNT0 = 12;
 166:	8c e0       	ldi	r24, 0x0C	; 12
 168:	86 bd       	out	0x26, r24	; 38
}
 16a:	9f 91       	pop	r25
 16c:	8f 91       	pop	r24
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <_exit>:
 178:	f8 94       	cli

0000017a <__stop_program>:
 17a:	ff cf       	rjmp	.-2      	; 0x17a <__stop_program>
