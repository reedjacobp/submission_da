
DA2C_Task1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000982  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008d3  00000000  00000000  00000be2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000330  00000000  00000000  000014b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000017e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000045b  00000000  00000000  0000180c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f2  00000000  00000000  00001c67  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001d59  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  c4:	0c 94 bb 00 	jmp	0x176	; 0x176 <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <main>:

#include <avr/io.h>

int main(void)
{
	DDRB = 0xFF; //all registers in DDRB are outputs
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x00; //all registers in DDRC are inputs
  d0:	17 b8       	out	0x07, r1	; 7
	PORTB = 0xFF; //turn on all LEDs
  d2:	85 b9       	out	0x05, r24	; 5
	TCCR0A = 0x00; //normal operation
  d4:	14 bc       	out	0x24, r1	; 36
	TCNT0 = 0x00; //start the timer
  d6:	16 bc       	out	0x26, r1	; 38
	TCCR0B |= (1 << CS02) | (1 << CS00); //set prescaler to 1024
  d8:	85 b5       	in	r24, 0x25	; 37
  da:	85 60       	ori	r24, 0x05	; 5
  dc:	85 bd       	out	0x25, r24	; 37
					}
				}
				PORTB |= (1 << 2); //turn off LED @ PB2
			}
		}
		PORTB ^= (1 << 3); //once overflow has been counted 23 times, turn off LED by XOR
  de:	98 e0       	ldi	r25, 0x08	; 8
	//The fout for this is about 61Hz
	
	while(1)
	{
		count = 0;
		TCNT0 = 0x00; //start the timer
  e0:	16 bc       	out	0x26, r1	; 38
	
	//The fout for this is about 61Hz
	
	while(1)
	{
		count = 0;
  e2:	20 e0       	ldi	r18, 0x00	; 0
  e4:	30 e0       	ldi	r19, 0x00	; 0
		TCNT0 = 0x00; //start the timer
		while(count < 23) //60% off
		{
			if(TCNT0 == 0xFF) //check to see if TOP(255) has been reached
  e6:	86 b5       	in	r24, 0x26	; 38
  e8:	8f 3f       	cpi	r24, 0xFF	; 255
  ea:	21 f4       	brne	.+8      	; 0xf4 <main+0x28>
			{
				count++; //upon overflow, count it, then reset timer
  ec:	2f 5f       	subi	r18, 0xFF	; 255
  ee:	3f 4f       	sbci	r19, 0xFF	; 255
				TCNT0 = 0x00; //reset timer
  f0:	16 bc       	out	0x26, r1	; 38
  f2:	15 c0       	rjmp	.+42     	; 0x11e <main+0x52>
			}
			
			else if(!(PINC & (1 << 3))) //check if SW3 is pushed
  f4:	33 99       	sbic	0x06, 3	; 6
  f6:	13 c0       	rjmp	.+38     	; 0x11e <main+0x52>
			{
				PORTB |= (1 << 3); //turn off LED @ PB3
  f8:	2b 9a       	sbi	0x05, 3	; 5
				PORTB &= ~(1 << 2); //turn on LED @ PB2
  fa:	2a 98       	cbi	0x05, 2	; 5
				TCNT0 = 0x00; //reset timer if switch is pushed
  fc:	16 bc       	out	0x26, r1	; 38
  fe:	22 e5       	ldi	r18, 0x52	; 82
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	07 c0       	rjmp	.+14     	; 0x112 <main+0x46>
				count = 0;
				while(count < 82) //1.333 seconds
				{
					if(TCNT0 == 0xFF)
 104:	86 b5       	in	r24, 0x26	; 38
 106:	8f 3f       	cpi	r24, 0xFF	; 255
 108:	e9 f7       	brne	.-6      	; 0x104 <main+0x38>
					{
						count++;
						TCNT0 = 0x00;
 10a:	16 bc       	out	0x26, r1	; 38
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	31 09       	sbc	r19, r1
			{
				PORTB |= (1 << 3); //turn off LED @ PB3
				PORTB &= ~(1 << 2); //turn on LED @ PB2
				TCNT0 = 0x00; //reset timer if switch is pushed
				count = 0;
				while(count < 82) //1.333 seconds
 110:	21 f0       	breq	.+8      	; 0x11a <main+0x4e>
				{
					if(TCNT0 == 0xFF)
 112:	86 b5       	in	r24, 0x26	; 38
 114:	8f 3f       	cpi	r24, 0xFF	; 255
 116:	b1 f7       	brne	.-20     	; 0x104 <main+0x38>
 118:	f8 cf       	rjmp	.-16     	; 0x10a <main+0x3e>
					{
						count++;
						TCNT0 = 0x00;
					}
				}
				PORTB |= (1 << 2); //turn off LED @ PB2
 11a:	2a 9a       	sbi	0x05, 2	; 5
 11c:	03 c0       	rjmp	.+6      	; 0x124 <main+0x58>
	
	while(1)
	{
		count = 0;
		TCNT0 = 0x00; //start the timer
		while(count < 23) //60% off
 11e:	27 31       	cpi	r18, 0x17	; 23
 120:	31 05       	cpc	r19, r1
 122:	0c f3       	brlt	.-62     	; 0xe6 <main+0x1a>
					}
				}
				PORTB |= (1 << 2); //turn off LED @ PB2
			}
		}
		PORTB ^= (1 << 3); //once overflow has been counted 23 times, turn off LED by XOR
 124:	85 b1       	in	r24, 0x05	; 5
 126:	89 27       	eor	r24, r25
 128:	85 b9       	out	0x05, r24	; 5
		count = 0; //reset the count
		TCNT0 = 0x00; //since timer is constantly incrementing, I must reset right before a loop uses it
 12a:	16 bc       	out	0x26, r1	; 38
				}
				PORTB |= (1 << 2); //turn off LED @ PB2
			}
		}
		PORTB ^= (1 << 3); //once overflow has been counted 23 times, turn off LED by XOR
		count = 0; //reset the count
 12c:	20 e0       	ldi	r18, 0x00	; 0
 12e:	30 e0       	ldi	r19, 0x00	; 0
		TCNT0 = 0x00; //since timer is constantly incrementing, I must reset right before a loop uses it
		while(count < 15) //40% on
		{
			if(TCNT0 == 0xFF) //check to see if TOP(255) has been reached
 130:	86 b5       	in	r24, 0x26	; 38
 132:	8f 3f       	cpi	r24, 0xFF	; 255
 134:	21 f4       	brne	.+8      	; 0x13e <main+0x72>
			{
				count++; //upon overflow, count it, then reset timer
 136:	2f 5f       	subi	r18, 0xFF	; 255
 138:	3f 4f       	sbci	r19, 0xFF	; 255
				TCNT0 = 0x00; //reset timer
 13a:	16 bc       	out	0x26, r1	; 38
 13c:	15 c0       	rjmp	.+42     	; 0x168 <main+0x9c>
			}
			else if(!(PINC & (1 << 3))) //check if SW3 is pushed
 13e:	33 99       	sbic	0x06, 3	; 6
 140:	13 c0       	rjmp	.+38     	; 0x168 <main+0x9c>
			{
				PORTB |= (1 << 3);
 142:	2b 9a       	sbi	0x05, 3	; 5
				PORTB &= ~(1 << 2);
 144:	2a 98       	cbi	0x05, 2	; 5
				count = 0;
				TCNT0 = 0x00; //reset timer if switch is pushed
 146:	16 bc       	out	0x26, r1	; 38
 148:	22 e5       	ldi	r18, 0x52	; 82
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	07 c0       	rjmp	.+14     	; 0x15c <main+0x90>
				while(count < 82) //1.333 seconds
				{
					if(TCNT0 == 0xFF)
 14e:	86 b5       	in	r24, 0x26	; 38
 150:	8f 3f       	cpi	r24, 0xFF	; 255
 152:	e9 f7       	brne	.-6      	; 0x14e <main+0x82>
					{
						count++;
						TCNT0 = 0x00;
 154:	16 bc       	out	0x26, r1	; 38
 156:	21 50       	subi	r18, 0x01	; 1
 158:	31 09       	sbc	r19, r1
			{
				PORTB |= (1 << 3);
				PORTB &= ~(1 << 2);
				count = 0;
				TCNT0 = 0x00; //reset timer if switch is pushed
				while(count < 82) //1.333 seconds
 15a:	21 f0       	breq	.+8      	; 0x164 <main+0x98>
				{
					if(TCNT0 == 0xFF)
 15c:	86 b5       	in	r24, 0x26	; 38
 15e:	8f 3f       	cpi	r24, 0xFF	; 255
 160:	b1 f7       	brne	.-20     	; 0x14e <main+0x82>
 162:	f8 cf       	rjmp	.-16     	; 0x154 <main+0x88>
					{
						count++;
						TCNT0 = 0x00;
					}
				}
				PORTB |= (1 << 2); 
 164:	2a 9a       	sbi	0x05, 2	; 5
 166:	03 c0       	rjmp	.+6      	; 0x16e <main+0xa2>
			}
		}
		PORTB ^= (1 << 3); //once overflow has been counted 23 times, turn off LED by XOR
		count = 0; //reset the count
		TCNT0 = 0x00; //since timer is constantly incrementing, I must reset right before a loop uses it
		while(count < 15) //40% on
 168:	2f 30       	cpi	r18, 0x0F	; 15
 16a:	31 05       	cpc	r19, r1
 16c:	0c f3       	brlt	.-62     	; 0x130 <main+0x64>
					}
				}
				PORTB |= (1 << 2); 
			}			
		}
		PORTB ^= (1 << 3); //once overflow has been counted 12 times, turn on LED by XOR
 16e:	85 b1       	in	r24, 0x05	; 5
 170:	89 27       	eor	r24, r25
 172:	85 b9       	out	0x05, r24	; 5
	}
 174:	b5 cf       	rjmp	.-150    	; 0xe0 <main+0x14>

00000176 <_exit>:
 176:	f8 94       	cli

00000178 <__stop_program>:
 178:	ff cf       	rjmp	.-2      	; 0x178 <__stop_program>
